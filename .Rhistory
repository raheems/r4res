C-->E
B-->D
C-->D
D-->F
E-->F
")
mermaid("
graph LR
A[Vector]<-- B[Atomic]
A-->C
C-->E
B-->D
C-->D
D-->F
E-->F
")
mermaid("
graph LR
A[Vector] --> B[Atomic]
A-->C
C-->E
B-->D
C-->D
D-->F
E-->F
")
mermaid("
graph LR
A[Vector] --> B[Atomic]
B[Atomic] --> C[Logical]
B[Atomic] --> D[Integer]
B[Atomic] --> E[Character]
")
mermaid("
graph RL
A[Vector] --> B[Atomic]
B[Atomic] --> C[Logical]
B[Atomic] --> D[Integer]
B[Atomic] --> E[Character]
")
mermaid("
graph RL
A[Vector] <-- B[Atomic]
B[Atomic] --> C[Logical]
B[Atomic] --> D[Integer]
B[Atomic] --> E[Character]
")
mermaid("
graph LR
A[Vector] <-- B[Atomic]
B[Atomic] --> C[Logical]
B[Atomic] --> D[Integer]
B[Atomic] --> E[Character]
")
mermaid("
graph LR
A[Vector] --> B[Atomic]
B[Atomic] --> C[Logical]
B[Atomic] --> D[Integer]
B[Atomic] --> E[Character]
")
mermaid("
graph LR
A[Vector] --> B[Atomic]
B[Atomic] --> C[Logical]
B[Atomic] --> D[Integer]
B[Atomic] --> E[Double]
B[Atomic] --> F[Character]
D[Integer] --> G[Numeric]
E[Double] --> G[Numeric]
")
grViz("
digraph a_nice_graph {
# node definitions with substituted label text
node [fontname = Helvetica]
a [label = '@@1']
b [label = '@@2-1']
c [label = '@@2-2']
d [label = '@@2-3']
e [label = '@@2-4']
f [label = '@@2-5']
g [label = '@@2-6']
h [label = '@@2-7']
i [label = '@@2-8']
j [label = '@@2-9']
# edge definitions with the node IDs
a -> {b c d e f g h i j}
}
[1]: 'top'
[2]: 10:20
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
A <- 1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
A->1 B->2 B->3 B->4 C->A
1->D E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
A; B; C; D; E; F
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
1; 2; 3; 4; 5; 6; 7; 8
# several 'edge' statements
A->1 B->2 B->3 B->4 C->A
D ->1 E->A 2->4 1->5 1->F
E->6 4->6 5->7 6->7 3->8
}
")
library(DiagrammeR)
mermaid("
graph LR
B[Atomic] -->  A[Vector]
C[Logical] --> B[Atomic]
B[Atomic] --> D[Integer]
B[Atomic] --> E[Double]
B[Atomic] --> F[Character]
D[Integer] --> G[Numeric]
E[Double] --> G[Numeric]
")
library(DiagrammeR)
mermaid("
graph LR
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
B[Atomic] --> D[Integer]
B[Atomic] --> E[Double]
B[Atomic] --> F[Character]
D[Integer] --> G[Numeric]
E[Double] --> G[Numeric]
")
library(DiagrammeR)
mermaid("
graph RL
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
B[Atomic] --> D[Integer]
B[Atomic] --> E[Double]
B[Atomic] --> F[Character]
D[Integer] --> G[Numeric]
E[Double] --> G[Numeric]
")
library(DiagrammeR)
mermaid("
graph LR
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
")
library(DiagrammeR)
mermaid("
graph LR
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
")
library(DiagrammeR)
mermaid("
graph LR
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
E[Character] --> A[Atomic]
")
library(DiagrammeR)
mermaid("
graph LR
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
E[Character] --> A[Atomic]
F[Integer] --> G[Numeric]
")
library(DiagrammeR)
mermaid("
graph LR
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
E[Character] --> A[Atomic]
F[Integer] --> G[Numeric]
H[Integer] --> G[Numeric]
G[Numeric] --> A[Atomic]
")
library(DiagrammeR)
mermaid("
graph LR
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
E[Character] --> A[Atomic]
G[Numeric] --> A[Atomic]
F[Integer] --> G[Numeric]
H[Integer] --> G[Numeric]
")
library(DiagrammeR)
mermaid("
graph LR
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
E[Character] --> A[Atomic]
F[Integer] --> G[Numeric]
H[Integer] --> G[Numeric]
")
library(DiagrammeR)
mermaid("
graph LR
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
E[Character] --> A[Atomic]
G[Numeric] --> A[Atomic]
F[Integer] --> G[Numeric]
H[Integer] --> G[Numeric]
")
library(DiagrammeR)
mermaid("
graph LR
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
E[Character] --> A[Atomic]
G[Numeric] --> A[Atomic]
F[Integer] --> G[Numeric]
H[Double] --> G[Numeric]
")
library(DiagrammeR)
mermaid("
graph LR
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
E[Character] --> A[Atomic]
F[Numeric] --> A[Atomic]
G[Integer] --> F[Numeric]
H[Double] --> F[Numeric]
")
library(DiagrammeR)
mermaid("
graph LR
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
E[Character] --> A[Atomic]
G[Integer] --> F[Numeric]--> A[Atomic]
H[Double] --> F[Numeric]--> A[Atomic]
")
library(DiagrammeR)
mermaid("
graph LR
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
E[Character] --> A[Atomic]
")
library(DiagrammeR)
mermaid("
graph LR
F[Integer] --> D[Numeric]
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
E[Character] --> A[Atomic]
")
library(DiagrammeR)
mermaid("
graph LR
F[Integer] --> D[Numeric]
G[Double] --> D[Numeric]
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
E[Character] --> A[Atomic]
")
library(DiagrammeR)
mermaid("
graph LR
H(Factor) --> F[Integert]
F[Integer] --> D[Numeric]
G[Double] --> D[Numeric]
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
E[Character] --> A[Atomic]
")
library(DiagrammeR)
mermaid("
graph LR
I(Date-Time) --> G[Double]
H(Factor) --> F[Integer]
F[Integer] --> D[Numeric]
G[Double] --> D[Numeric]
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
E[Character] --> A[Atomic]
")
library(DiagrammeR)
mermaid("
graph LR
I(Date) --> G[Double]
H(Factor) --> F[Integer]
F[Integer] --> D[Numeric]
G[Double] --> D[Numeric]
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
D[Numeric] --> A[Atomic]
E[Character] --> A[Atomic]
")
?matrix
library(DiagrammeR)
mermaid("
graph LR
A[Atomic] -->  B[Vector]
C[List] --> B[Vector]
")
?c
logical_vec = c(TRUE, TRUE, FALSE, T)
integer_vec = c(1L, 2L, 10L, 5L)
double_vec = c(1, 2, 10, 5)
character_vect = c('Dhaka', 'New York', 'Washington', 'Anything')
typeof(logical_vec)
typeof(logical_vec)
typeof(integer_vec)
typeof(logical_vec)
typeof(logical_vec)
typeof(logical_vec)
typeof(integer_vec)
typeof(double_vec)
typeof(character_vect)
10L/2
10L/2.5
10L/3L
as.integer(10L/3L)
typeof(3)
typeof(3L)
class(3)
library(DiagrammeR)
mermaid("
graph LR
I(Date) --> G[Double]
H(Factor) --> F[Integer]
F[Integer] --> A[Atomic]
G[Double] --> A[Atomic]
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
")
library(DiagrammeR)
mermaid("
graph LR
I(Date) --> G[Double]
H(Factor) --> F[Integer]
F[Integer] --> A[Atomic]
G[Double] --> A[Atomic]
A[Atomic] -->  B[Vector]
C[Logical] --> A[Atomic]
E[Character] --> A[Atomic]
")
a = c(1, 2, 3, 4)
dim(a) <- c(2,3)
a = c(1, 2, 3, 4)
dim(a) <- c(2,2)
a = c(1, 2, 3, 4)
dim(a) <- c(2,2)
a
a = c(1, 2, 3, 4)
dim(a) = c(2,2)
a
a = matrix(1:10, nrow = 2, ncol = 5)
a
?matrix
? matrix
a = list(
1:10
)
a
a = list(
1:10,
c(T, F)
)
a
a = list(
1:10,
c(T, F, F)
)
a
a = list(
series = 1:10,
true_or_false = c(T, F, F)
)
a
a = list(
series = 1:10,
tf = c(T, F, F)
)
a
unlist(a)
a
a[1]
a[2]
a[3]
a[1,2]
a[1]
a[1][2]
a$series[1]
str(a)
a = list(
series = 1:10,
series2 = c(1, 10)
tf = c(T, F, F)
a = list(
series = 1:10,
series2 = c(1, 10),
tf = c(T, F, F)
)
a
str(a)
is.double(a$series2)
is.integer(a$series2)
is.numeric(a$series2)
is.numeric(a$series)
len(a)
length(a)
as.data.frame(a)
a
df = data.frame(
x = 1:5,
age = c(10, 11, 20, 30, 32)
)
df
df_list = list(
x = 1:5,
age = c(10, 11, 20, 30, 32)
)
df = data.frame(df_list)
df
str(as.factor(c('male', 'female')))
df_list = list(
x = 1:5,
age = c(10, 11, 20, 30, 32),
sex = c('M', 'F', 'F', 'M', 'M')
)
df = data.frame(df_list)
df
str(df)
df = data.frame(
x = 1:5,
age = c(10, 11, 20, 30, 32),
sex = c('M', 'F', 'F', 'M', 'M')
)
df
str(df)
?data.frame
glimpse(df)
names(df)
str(df)
attr(df)
typeof(df)
class(df)
as.tibble(df)
as_tibble(df)
attributes(df)
a
attributes(a)
names(a)
rownames(df)
colnames(df)
nrow(df)
ncol(df)
dim(df)
length(df)
View(df)
View(a)
