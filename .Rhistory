str(matrix(c(1, 2, 3, 4), nrow = 2))
a = list(
series = 1:10,
series2 = c(1, 10),
tf = c(T, F, F)
)
str(a)
attributes(a)
names(a)
dim(a)
row.names(df)
class(df)
# an object
x = c(1, 2, 3)
print(x)
typeof(x)
# another object
y = 1:3
print(y)
typeof(y)
# character vector
z = c('Male', 'Female')
print(z)
typeof(z)
str(x)
str(y)
str(z)
attributes(x) # returns NULL
my_mat = matrix(1:10, nrow = 2, ncol = 5)
typeof(my_mat)
str(my_mat)
attributes(my_mat)
my_list = list(
serial = 1:5,
age = c(10, 11, 20, 30, 32),
sex = c('M', 'F', 'F', 'M', 'M')
)
str(my_list)
attributes(my_list)
names(my_list)
dim(my_list)
my_list = list(
serial = 1:5,
age = c(10, 11, 20, 30, 32),
sex = c('M', 'F', 'F', 'M', 'M')
)
df = data.frame(my_list)
str(df)
attributes(df)
x = c(1, 2, 3)
my_list = list(
serial = 1:5,
age = c(10, 11, 20, 30, 32),
sex = c('M', 'F', 'F', 'M', 'M')
)
df = data.frame(my_list)
df
typeof(df)
str(df)
attributes(df)
names(df)
row.names(df)
class(df)
row.names(df)
row.names(df)==1
row.names(df)=="2"
typeof(row.names(df))
?colnames
rownames(df)
colnames(df)
?colnames
?names
?colnames
x
names(x)
my_vec = c(10.1, 2.2, 32.3, 5.4)
my_vec[1]
my_vec[2]
# extract the first and third element
my_vec[c(1, 3)]
my_vec[TRUE]
my_vec[c(TRUE)]
my_vec[c(TRUE, FALSE)]
my_vec[c(FALSE, FALSE)]
my_vec[c(TRUE, FALSE)]
my_vec
my_vec[c(TRUE, FALSE)]
# keep first element by exclude the second
my_vec[c(1, -2)]
my_vec = c(10.1, 2.2, 32.3, 5.4)
my_vec[1]
my_vec[2]
# extract the first and third element
my_vec[c(1, 3)]
# exclude the second element
my_vec[-c(2)]
# keep first element by exclude the second
my_vec[c(1, -2)]
my_vec >1
my_vec > 9
my_vec[my_vec > 9]
typeof(my_vec>9)
my_vec[1, 2]
?matrix
df$sex
my_list['age']
my_vec = c(10.1, 2.2, 32.3, 5.4)
my_vec[1]
my_vec[2]
# extract the first and third element
my_vec[c(1, 3)] # subsetting with integer position
# exclude the second element
my_vec[-c(2)]
my_vec > 9
# check the type of the resulting vector
typeof(my_vec > 9)
my_vec[my_vec > 9] # subsetting with logical vector
my_mat = matrix(1:50, nrow = 10, ncol = 5)
my_mat
# extract the first element
my_mat[1,1]
# subset the first row
my_mat[1, ]
# subset rows 1, 2, and 4 and return all columns
my_mat[c(1, 2, 4), ]
# subset the second columns and keep values in all rows
my_mat[ , 2]
x = c(1, 2, 3)
my_list = list(
serial = 1:5,
age = c(10, 11, 20, 30, 32),
sex = c('M', 'F', 'F', 'M', 'M')
)
df = data.frame(my_list)
df
typeof(df)
str(df)
df$age
df$serial
df$sex
df$sex
df$sex == 'M'
# subset the males
df[df$sex == 'M', ]
df[df$sex == 'M', c('age', 'sex')]
df[df$sex == 'M', c(2, 3)]
# prints the list
my_list
my_list$age
# extracts the first item of the list
my_list[1]
# extracts the elements of the first item of the list
my_list[[1]]
my_list['age']
my_vec
my_vec = c(10.1, 2.2, 32.3, 5.4)
my_vec[1]
my_vec[2]
# extract the first and third element
my_vec[c(1, 3)] # subsetting with integer position
# exclude the second element
my_vec[-c(2)]
my_vec > 9
# check the type of the resulting vector
typeof(my_vec > 9)
my_vec[my_vec > 9] # subsetting with logical vector
my_mat = matrix(1:50, nrow = 10, ncol = 5)
my_mat
# extract the first element
my_mat[1,1]
# subset the first row
my_mat[1, ]
# subset rows 1, 2, and 4 and return all columns
my_mat[c(1, 2, 4), ]
# subset the second columns and keep values in all rows
my_mat[ , 2]
x = c(1, 2, 3)
my_list = list(
serial = 1:5,
age = c(10, 11, 20, 30, 32),
sex = c('M', 'F', 'F', 'M', 'M')
)
df = data.frame(my_list)
df
typeof(df)
str(df)
df$age
df$serial
df$sex
df$sex
df$sex == 'M'
# subset the males
df[df$sex == 'M', ]
df[df$sex == 'M', c('age', 'sex')]
df[df$sex == 'M', c(2, 3)]
# prints the list
my_list
my_list$age
# extracts the first item of the list
my_list[1]
# extracts the elements of the first item of the list
my_list[[1]]
my_list['age']
my_list[['age']][2]
typeof(df)
my_vec2 = my_vec
my_vec2
my_vec2 = my_vec
# replace the value in the second position
my_vec2[2] = 20.2
my_vec
my_vec2 = my_vec
# replace the value in the second position
my_vec2[2] = 20.2
my_vec
my_vec2 = my_vec
# replace the value in the second position
my_vec2[2] = 20.2
my_vec2
my_vec2 = my_vec
# replace the value in the second position
my_vec2[2] = 20.2
my_vec
my_vec2
my_mat2 = my_mat
my_mat2[1, 1] = 10
my_mat2
my_list2 = my_list
my_list2
my_list2 = my_list
new_age = age + 10
my_list2 = my_list
new_age = my_list$age + 10
my_list2$age = new_age
my_list
my_list2
my_list$new_age = my_list$age + 20
my_list
%*%
?%*%
mat_a = matrix(c(10, 20, 30, 40), nrow = 2)
mat_b = matrix(c(11, 21, 31, 61), nrow = 2)
mat_a * mat_b
mat_a = matrix(c(10, 20, 30, 40), nrow = 2)
mat_b = matrix(c(1, 2, 3, 4), nrow = 2)
# Element wise multiplication
mat_a * mat_b
mat_a = matrix(c(10, 20, 30, 40), nrow = 2)
mat_b = matrix(c(1, 2, 3, 4), nrow = 2)
mat_a
mat_b
# Element wise multiplication
mat_a * mat_b
mat_a = matrix(c(10, 20, 30, 40), nrow = 2)
mat_b = matrix(c(1, 2, 3, 4), nrow = 2)
mat_a
mat_b
# Element wise multiplication
mat_a * mat_b
# True matrix multipliation
mat_a %*% mat_b
10 -> yy
yy
x = 5
x = x == 3
x
x = 3
x == 3
x = 3
x == 3
!(x == 3)
x = 3
x == 3 # its TRUE
!(x == 3) # when negated, it should be false
x = 3
x == 3 # its TRUE
!(x == 3) # when negated, it should be false
x != 3 # equivalent to the previous one
x = c(10, 20, 30)
y = c(10, 21, 40)
x & y
x = c(10, 20, 30)
y = c(10, 21, 40)
x & y
x = c(10, 20, 30)
y = c(10, 21, 40)
x == y
x = c(10, 20, 30)
y = c(10, 21, 40)
x == 10 & y == 10
x = c(10, 20, 30)
y = c(10, 21, 40)
(x == 10) & (y == 10)
x = c(10, 20, 30)
y = c(10, 21, 40)
(x == 10) & (y == 10) # only first element satisfies both conditions
(x == 10) & (y == 20)
x = c(10, 20, 30)
y = c(11, 20, 40)
(x == 10) & (y == 10) # only first element satisfies both conditions
(x == 20) & (y == 20) # both conditions are not met
x && y
x && y
x = c(10, 20, 30)
y = c(11, 20, 40)
x && y
x = c(10, 20, 30)
y = c(11, 20, 40)
if length(x) > 0 & y[1]==11 {
x = c(10, 20, 30)
y = c(11, 20, 40)
if (length(x) > 0) & y[1]==11 {
x = c(10, 20, 30)
y = c(11, 20, 40)
if (length(x) > 0 & y[1]==11) {
print("yes")
}
x = c(10, 20, 30)
y = c(11, 20, 40)
if (length(x) > 0 & y[1]==10) {
print("yes")
}
x = c(10, 20, 30)
y = c(11, 20, 40)
if (length(x) > 0 & y[1]==10) {
print("yes")
}
x = c(10, 20, 30)
y = c(11, 20, 40)
if (length(x) > 0 && y[1]==10) {
print("yes")
}
x = c(10, 20, 30)
y = c(11, 20, 40)
if (length(x) > 0 & y[1]==10) {
print("yes")
}
x = c(10, 20, 30)
y = c(11, 20, 40)
if (length(x) > 0 & y[1]==10) {
print("yes") else{
x = c(10, 20, 30)
y = c(11, 20, 40)
if (length(x) > 0 & y[1]==10) {
print("yes")
} else{
print("No")
}
x = c(10, 20, 30)
y = c(11, 20, 40)
if (length(x) > 0 && y[1]==10) {
print("yes")
} else{
print("No")
}
x = c(10, 20, 30)
y = c(11, 20, 40)
if (length(x) > 0 && y %in% c(11, 20, 40)) {
print("yes")
} else{
print("No")
}
x = c(10, 20, 30)
y = 10
if (length(x) > 0 && y %in% c(11, 20, 40)) {
print("yes")
} else{
print("No")
}
x = c(10, 20, 30)
y = 10
if (length(x) > 0 && y %in% c(10, 20, 40)) {
print("yes")
} else{
print("No")
}
if (length(x) > 0 & y %in% c(10, 20, 40)) {
print("yes")
} else{
print("No")
}
if (length(x) > 0 & y %in% c(20, 10, 40)) {
print("yes")
} else{
print("No")
}
x = c(10, 20, 30)
y = 10
if (length(x) > 0 && y %in% c(29, 10, 40)) {
print("yes")
} else{
print("No")
}
length(x) > 0 & y %in% c(20, 10, 40))
length(x) > 0 & y %in% c(20, 10, 40)
length(x) > 0 && y %in% c(20, 10, 40)
df
df
df$age == 10 & df$sex == 'M'
x = c(10, 20, 30)
y = 10
if (length(x) > 0 && y %in% c(29, 10, 40)) {
print("yes")
} else{
print("No")
}
df
df$age == 10 & df$sex == 'M'
x = 5
x = x == 3 # checking if the value of x is 3
x
x = 5
x <- x == 3 # checking if the value of x is 3
x
mat_a = matrix(c(10, 20, 30, 40), nrow = 2)
mat_b = matrix(c(1, 2, 3, 4), nrow = 2)
mat_a
mat_b
# Element wise multiplication
mat_a * mat_b
# True matrix multiplication
mat_a %*% mat_b
x = 3
x == 3 # its TRUE
!(x == 3) # when negated, it should be false
x != 3 # equivalent to the previous one
x = c(10, 20, 30)
y = 10
if (length(x) > 0 && y %in% c(29, 10, 40)) {
print("yes")
} else{
print("No")
}
df$age == 10 & df$sex == 'M'
df
df$age == 10 & df$sex == 'M'
?&&
mtcars
mtcars %>% glimpse()
?mpg
??mpg
?tidyverse::mpg
?ggpllt2::mpg
?ggplot2::mpg
??mpg
?ggplot2::mpg
table(mpg$drv)
mpg %>%
select(drv) %>%
table()
library(tidyverse)
mpg %>% glimpse()
?ggplot2::mpg
mpg %>% glimpse()
mpg %>%
select(drv) %>%
table()
mpg %>%
# select(drv) %>%
table()
mpg %>%
select(drv) %>%
table()
mpg %>%
filter(drv == f)
mpg %>%
filter(drv == 'f')
table(mpg$cyl)
mpg %>%
filter(drv == 'f', cyl == 5)
mpg %>%
filter(drv == 'f', cyl == 5.5)
mpg %>%
filter(drv == 'f', cyl == 5.0)
mpg %>%
filter(drv == 'f', cyl == 5)
mpg %>%
filter(drv == 'f', cyl == '5')
mpg %>%
filter(drv == 'f', cyl == 5)
mpg %>%
filter(drv == 'f' | cyl == 5)
mpg %>%
filter(drv == 'f' | year == c(1999, 2000) )
mpg %>%
filter(year == c(1999, 2000))
mpg %>%
filter(year == c(1999, 2000)) %>%
select(year) %>%
table()
table(mpg$year)
mpg %>%
filter(city == c(24, 20)) %>%
select(city) %>%
table()
mpg %>%
filter(cty == c(24, 20)) %>%
select(cty) %>%
table()
