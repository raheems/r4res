[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R for Research",
    "section": "",
    "text": "Preface"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "2 Getting Started\nWe need two pieces of software to get started with R for research.\nR itself has a graphical interface. However, RStudio has some nice features added to it that provides an improved R experience. RStudio is an integrated development environment (IDE). Although RStudio has a graphical interface, for much of the actions, you will need to write R codes. And that is a good thing. There are point and click menus for doing certain things such as configuring the R environment, and the RStudio itself. However, for most of our works, we will be writing codes using the build in editor in RStudio.\nR can be installed both in Windows and Mac operating systems. Installation is straight forward like any other software you install in your operating system. In the following I am outlining the steps both for Windowes and Mac OS.\nR is freely available open source software that is free to use, modify, distribute under the GNU licence. This simply means you can use R for anything–hobby projects, funded projects, or comercial works. Absolutely free.\nTo download R, go to https://cloud.r-project.org/ and download the latest version for your operating system. R is available for Windows, Mac OSX, and of course, Linux systems.\nRStudio is a free software under AGPL license. This is developed and maintained by RStudio which is a software company who develops and sells R-based software for enterprise use.\nTo download RStudio, go to https://rstudio.com/products/rstudio/download/ and click on the Download button for RStudio Desktop. The website will automatically detect your operating system and give you the link to download."
  },
  {
    "objectID": "working-with-dates.html",
    "href": "working-with-dates.html",
    "title": "2  Working with Dates",
    "section": "",
    "text": "3 Explore Employee table"
  },
  {
    "objectID": "working-with-dates.html#sec-covid19",
    "href": "working-with-dates.html#sec-covid19",
    "title": "2  Working with Dates",
    "section": "3.1 Practical Challenge",
    "text": "3.1 Practical Challenge\nUse the COVID dataset to answer the following questions.\n\n3.1.1 Create a new column to the existing table to show the daily deaths for each state\n\nselect *, \n  deaths - lag(deaths) over(partition by state order by date) as daily_deaths \n  from covid19.us_states limit 3\n\n\n3 records\n\n\ndate\nstate\nfips\ncases\ndeaths\ndaily_deaths\n\n\n\n\n2020-03-13\nAlabama\n1\n6\n0\nNA\n\n\n2020-03-14\nAlabama\n1\n12\n0\n0\n\n\n2020-03-15\nAlabama\n1\n23\n0\n0\n\n\n\n\n\n\n\n3.1.2 Create a table showing the highest deaths on a single day and the\ncorresponding date for that state\n\n\n3.1.3 Calculate the number of days it took to reach the highest daily deaths for each state\n\n\n3.1.4 Rank the states based\non the time it took to reach the highest deaths on a single day for each state Create a table that shows three columns: state name, date of first death (or more), date of 1000th death (or more) Calculate the time it took to reach the 1000th death for each state Rank the states from severest to the least severe in terms of the days it took to reach the 1000th death. Show all states if applicable Bring population data in each state from external sources. Population data would include at least, the total population in the state, and other relevant data Calculate per capita death rates (total deaths divided by total population) per state per month Calculate the overall per capita death rate for each state Rank the states according to the overall per capita death rates (the highest one at the top)"
  },
  {
    "objectID": "working-with-dates.html#learning-objective",
    "href": "working-with-dates.html#learning-objective",
    "title": "2  Working with Dates",
    "section": "3.2 Learning objective",
    "text": "3.2 Learning objective\nIn Practical Challenge 3.1, we practiced several problems to test our understanding and skills to manipulate tables in a relational data base systems. Is the cross-referencing working as expected?\nReference for 3.1.1\n\ndbDisconnect(con)\n\n[1] TRUE"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Wickham, Hadley, Romain François, Lionel Henry, Kirill Müller, et al.\n2018. “Dplyr: A Grammar of Data Manipulation. R Package Version\n0.7. 6.” Computer Software]. Https://CRAN. R-Project.\nOrg/Package= Dplyr."
  },
  {
    "objectID": "index.html#work-in-progress",
    "href": "index.html#work-in-progress",
    "title": "R for Research",
    "section": "Work in progress",
    "text": "Work in progress\nBefore you begin, I would like to point out that this book is being actively written. That means, the organization of the contents is not finalized. As such, bookmarks would not be stable at this point. I would advise not to bookmark any chapter or section. Instead, bookmark the website of the book which is http://r4res.eraheem.com."
  },
  {
    "objectID": "index.html#have-questions",
    "href": "index.html#have-questions",
    "title": "R for Research",
    "section": "Have questions?",
    "text": "Have questions?\nThank you for reading this book. I hope this will be beneficial for you. Take a look at the contents and browse through the book. If you feel anything important is missing or you would like me to cover additional topics, please feel free to let me know by submitting a feature request at the Issue queue located at https://github.com/raheems/r4res/issues\nTo submit a question to the github issue queue, you need an account at https://www.Github.com, which is absolutely free. if you are not familiar with github, it is used by millions of developers worldwide. That may sound scary to you. But I can assure you that no technical knowledge is needed to submit a request or raise a question or report an error using the Issue queue.\nJust vist the Github website and sign up with your email if you do not have an account there. And submit your request. This way, I will be able to manage all the requests, and respond to your queries. This tools helps me to respond to you in an organized way.\nThis is also the fastest way to get a response from me if you have any question or suggestion about this book."
  },
  {
    "objectID": "index.html#features",
    "href": "index.html#features",
    "title": "R for Research",
    "section": "Features",
    "text": "Features\nThere are many books on R in the market. Yet, this is another book that is being written. You wonder, why. Here’s what I think about this book.\n\nThis book is specifically about using R for research in medical and clinical fields. Therefore, the examples in this book will be mostly if not all from the medical field.\nThis book is straight to the point and very specific without too much going into the nitty gritty of the technicality.\nThis book focuses on data analysis and report generation. As such, this book is particularly suitable for researchers in all fields, particularly in medical field.\nTools used in this book are the most modern and up to date. The old-style programming (base R style of coding has a steep learning curve whereas the new tidyverse suite of libraries have made this much easier and provides flexible framework for quick data analysis and producing publication quality graphics and tables."
  },
  {
    "objectID": "index.html#why_coding",
    "href": "index.html#why_coding",
    "title": "R for Research",
    "section": "Benefits of coding",
    "text": "Benefits of coding\nIn this book, I will be teaching how to do research using R and particularly by writing R codes. There will be no point and click interface like you see in some statistical software packages such as the SPSS. We will be writing codes all along and I will show you how easy it is and how beneficial it is to write codes instead of using point and click interface.\nYou might be thinking how writing code can beneficial when point and click is so easy.\n\nThe biggest benefit of wiring code, which is also the greates limitation of point and click facility is that what you do is completely reproducible.\nBy writing codes, you can easily try different things as data analysis involves a lot of trial and error and explorations. With a point and click facility, you cannot go one step back of your process if you make a mistake. Instead, you have to start from the beginning.\nYour results are shareable with potential collaborators and also with the journals where you would submit your manuscript for publiccation. These days many journals ask for computer program to ensure reproduciblity.\n\nLets dive in to the wonderful tool to power your research!"
  },
  {
    "objectID": "intro.html#work-in-progress",
    "href": "intro.html#work-in-progress",
    "title": "1  Introduction",
    "section": "1.1 Work in progress",
    "text": "1.1 Work in progress\nBefore you begin, I would like to point out that this book is being actively written. That means, the organization of the contents is not finalized. As such, bookmarks would not be stable at this point. I would adivse not to bookmark any chapter or section. Instead, bookmark the website of the book which is http://r4res.eraheem.com."
  },
  {
    "objectID": "intro.html#have-questions",
    "href": "intro.html#have-questions",
    "title": "1  Introduction",
    "section": "1.2 Have questions?",
    "text": "1.2 Have questions?\nThank you for reading this book. I hope this will be beneficial for you. Take a look at the contents and browse theough the book. If you feel anything important is missing or you would like me to cover additional topics, please feel free to let me know by submitting a feature request at the Issue queue located at https://github.com/raheems/r4res/issues\nTo submit a question to the github issue queue, you need an account at https://www.Github.com, which is absolutely free. if you are not familiar with github, it is used by millions of developers worldwide. That may sound scary to you. But I can assure you that no technical knowledge is needed to submit a request or raise a question or report an error using the Issue queue.\nJust vist the Github website and sign up with your email if you do not have an account there. And submit your request. This way, I will be able to manage all the requests, and respond to your queries. This tools helps me to respond to you in an organized way.\nThis is also the fastest way to get a response from me if you have any question or suggestion about this book."
  },
  {
    "objectID": "intro.html#features",
    "href": "intro.html#features",
    "title": "1  Introduction",
    "section": "1.3 Features",
    "text": "1.3 Features\nThere are many books on R in the market. Yet, this is another book that is being written. You wonder, why. Here’s what I think about this book.\n\nThis book is specifically about using R for research in medical and clinical fields. Therefore, the examples in this book will be mostly if not all from the medical field.\nThis book is straignt to the point and very specific without too much going into the nitty grity of the technicality.\nThis book focuses on data analysis and report generation. As such, this book is particularly suitable for researchers in all fields, particularly in medical field.\nTools used in this book are the most modern and up to date. The old-style programming (base R style of coding has a steep learning curve whereas the new tidyverse suite of libraries have made this much easier and provies flexible framework for quick data anlysis and producing publiccation quality graphics and tables."
  },
  {
    "objectID": "intro.html#why_coding",
    "href": "intro.html#why_coding",
    "title": "1  Introduction",
    "section": "1.4 Benefits of coding",
    "text": "1.4 Benefits of coding\nIn this book, I will be teaching how to do research using R and particularly by writing R codes. There will be no point and click interface like you see in some statistical software packages such as the SPSS. We will be writing codes all along and I will show you how easy it is and how beneficial it is to write codes instead of using point and click interface.\nYou might be thinking how writing code can beneficial when point and click is so easy.\n\nThe biggest benefit of wiring code, which is also the greated limitation of point and click facility is that what you do is completely reproducible.\nBy writing codes, you can easily try different things as data analysis involves a lot of trial and error and explorations. With a point and click facility, you cannot go one step back of your process if you make a mistake. Instead, you have to start from the beginning.\nYoure results are sharable with potential collaborators and also with the journals where you would submit your manuscript for publiccation. These days many journals ask for computer program to ensure reproduciblity.\n\nLets dive in to the wonderful tool to power your research!"
  },
  {
    "objectID": "intro.html#download-r-and-rstudio",
    "href": "intro.html#download-r-and-rstudio",
    "title": "1  Introduction",
    "section": "2.1 Download R and RStudio",
    "text": "2.1 Download R and RStudio\nR is freely available open source software that is free to use, modify, distribute under the GNU licence. This simply means you can use R for anything–hobby projects, funded projects, or comercial works. Absolutely free.\nTo download R, go to https://cloud.r-project.org/ and download the latest version for your operating system. R is available for Windows, Mac OSX, and of course, Linux systems.\nRStudio is a free software under AGPL license. This is developed and maintained by RStudio which is a software company who develops and sells R-based software for enterprise use.\nTo download RStudio, go to https://rstudio.com/products/rstudio/download/ and click on the Download button for RStudio Desktop. The website will automatically detect your operating system and give you the link to download."
  },
  {
    "objectID": "intro.html#installatiom",
    "href": "intro.html#installatiom",
    "title": "1  Introduction",
    "section": "3.3 Installatiom",
    "text": "3.3 Installatiom\nAfter downloading the software, first, install R and then install RStudio. I don’t think it matters, but since RStrudio uses R as a backend engine, I think the logical sequence should be to install R first and then RStudio.\nAfter its installed, you are good to get your hands dirty!"
  },
  {
    "objectID": "intro.html#setting-up-r-environment-in-mac",
    "href": "intro.html#setting-up-r-environment-in-mac",
    "title": "1  Introduction",
    "section": "3.1 Setting up R environment in Mac",
    "text": "3.1 Setting up R environment in Mac\n\n3.1.1 What you need\n\nDownload R for MacOS. Note that R is available for both Intel-based Mac and the newer Apple silicon-based Macs. Please read carefully on the download page for the correct version.\nDownload and install XQuartz from this page or directly from xquartz.org website. Download and install the version as recommended on the R for MacOSx download page.\nDownload Rstudio. The website will automatically recognize that you are using a Windows operating system and it will present you the option to download RStudio Desktop software for your system. Click the link on that page to download. Save it in a location that you can find later. This is how it looks like when this page was accessed on 2023-02-16\n\n\n\n\nScreenhot of Rstudio Download page as of 2023-02-16"
  },
  {
    "objectID": "intro.html#what-you-need",
    "href": "intro.html#what-you-need",
    "title": "1  Introduction",
    "section": "3.2 ### What you need",
    "text": "3.2 ### What you need"
  },
  {
    "objectID": "intro.html#setting-up-r-environment-in-windows",
    "href": "intro.html#setting-up-r-environment-in-windows",
    "title": "1  Introduction",
    "section": "3.2 Setting up R environment in Windows",
    "text": "3.2 Setting up R environment in Windows\n\nDownload R from https://cran.r-project.org/bin/windows/base/\nDownload Rstudio. The website will automatically recognize that you are using a Windows operating system and it will present you the option to download RStudio Desktop software for your system. Click the link on that page to download. Save it in a location that you can find later."
  },
  {
    "objectID": "intro.html#windows-installation",
    "href": "intro.html#windows-installation",
    "title": "1  Introduction",
    "section": "3.3 Windows Installation",
    "text": "3.3 Windows Installation"
  },
  {
    "objectID": "research-process.html#research-process",
    "href": "research-process.html#research-process",
    "title": "2  Organizing your project",
    "section": "2.1 Research process",
    "text": "2.1 Research process\nIn a nutshell, most quantitative social and medical research has the following steps–\n\nIdea/research question\nLiterature review\nStudy design\nData collection and data management\nStatistical analysis\nReport/manuscript writing\nPublication\n\n\nset.seed(19)\nx = rnorm(100)\nhist(x)"
  },
  {
    "objectID": "research-process.html#analytic-process",
    "href": "research-process.html#analytic-process",
    "title": "2  Organizing your project",
    "section": "2.2 Analytic process",
    "text": "2.2 Analytic process"
  },
  {
    "objectID": "intro.html#setting-up-r-in-mac",
    "href": "intro.html#setting-up-r-in-mac",
    "title": "1  Introduction",
    "section": "3.1 Setting up R in Mac",
    "text": "3.1 Setting up R in Mac\n\n3.1.1 What you need\n\nDownload R for MacOS. Note that R is available for both Intel-based Mac and the newer Apple silicon-based Macs. Please read carefully on the download page for the correct version.\nDownload and install XQuartz from this page or directly from xquartz.org website. Download and install the version as recommended on the R for MacOSx download page.\nDownload Rstudio. The website will automatically recognize that you are using a Windows operating system and it will present you the option to download RStudio Desktop software for your system. Click the link on that page to download. Save it in a location that you can find later. This is how it looks like when this page was accessed on 2023-02-16\n\n\n\n\nScreenhot of Rstudio Download page as of 2023-02-16"
  },
  {
    "objectID": "intro.html#setting-up-r-in-windows",
    "href": "intro.html#setting-up-r-in-windows",
    "title": "1  Introduction",
    "section": "3.2 Setting up R in Windows",
    "text": "3.2 Setting up R in Windows\n\n\n\nStep 1 Download R for Windows\n\n\nDownload R from https://cran.r-project.org/bin/windows/base/\n\n\n\nStep 2 Download Rtools\n\n\nDownload Rtools. Some packages in R need additional tools (to create the necessary development environment) to install packages.\n\n\n\nStep 3 Download Rtools\n\n\nDownload the version appropriate for your R version. Usually the the latest version, for example at the time or writing this document, Rtools 4.3, would be needed. On this page you will find a link Rtools43 installer (the link will be something like: https://cran.r-project.org/bin/windows/Rtools/rtools43/files/rtools43-5493-5475.exe). It is highly recommend that you download this file from the Rtools download page and NOT using the direct link above.\n\n\n\nStep 4 Download Rstudio\n\n\nDownload Rstudio. The website will automatically recognize that you are using a Windows operating system and it will present you the option to download RStudio Desktop software for your system. Click the link on that page to download. Save it in a location that you can find later.\nYou are done!"
  },
  {
    "objectID": "intro.html#installation-1",
    "href": "intro.html#installation-1",
    "title": "1  Introduction",
    "section": "3.3 Installation",
    "text": "3.3 Installation\nAfter downloading the software, first, install R and then install RStudio. I don’t think it matters, but since RStudio uses R as a backend engine, perhaps logical sequence should be to install R first and then RStudio.\nYou are done!"
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "1  Introduction",
    "section": "",
    "text": "2 Getting Started\nWe need two pieces of software to get started with R for research.\nR itself has a graphical interface. However, RStudio has some nice features added to it that provides an improved R experience. RStudio is an integrated development environment (IDE). Although RStudio has a graphical interface, for much of the actions, you will need to write R codes. And that is a good thing. There are point and click menus for doing certain things such as configuring the R environment, and the RStudio itself. However, for most of our works, we will be writing codes using the built in editor in RStudio.\nR can be installed both in Windows and Mac operating systems. Installation is straight forward like any other software you install in your operating system. In the following I am outlining the steps both for Windows and Mac OS.\nR is freely available open source software that is free to use, modify, distribute under the GNU licence. This simply means you can use R for anything–hobby projects, funded projects, or commercial works. Absolutely free.\nTo download R, go to https://cloud.r-project.org/ and download the latest version for your operating system. R is available for Windows, Mac OSX, and of course, Linux systems.\nRStudio is a free software under AGPL license. This is developed and maintained by RStudio which is a software company who develops and sells R-based software for enterprise use."
  },
  {
    "objectID": "introduction.html#setting-up-r-in-mac",
    "href": "introduction.html#setting-up-r-in-mac",
    "title": "1  Introduction",
    "section": "3.1 Setting up R in Mac",
    "text": "3.1 Setting up R in Mac\n\n3.1.1 What you need\n\nDownload R for MacOS. Note that R is available for both Intel-based Mac and the newer Apple silicon-based Macs. Please read carefully on the download page for the correct version.\nDownload and install XQuartz from this page or directly from xquartz.org website. Download and install the version as recommended on the R for MacOSx download page.\nDownload Rstudio. The website will automatically recognize that you are using a Mac operating system and it will present you the option to download RStudio Desktop software for your system. Click the link on that page to download. Save it in a location that you can find later. This is how it looks like when this page was accessed on 2023-02-16\n\n\n\n\nScreenhot of Rstudio Download page as of 2023-02-16"
  },
  {
    "objectID": "introduction.html#setting-up-r-in-windows",
    "href": "introduction.html#setting-up-r-in-windows",
    "title": "1  Introduction",
    "section": "3.2 Setting up R in Windows",
    "text": "3.2 Setting up R in Windows\n\n3.2.1 What you need\n\nDownload R for Windows. Most newer PCs are 64 bit. So download the version appropriate for your operating system.\nDownload and install RTools by visiting this page and following the instructions therein. The download link is available on this page. So please read and find the link and then download.\nDownload Rstudio. The website will automatically recognize that you are using a Windows operating system and it will present you the option to download RStudio Desktop software for your system. Click the link on that page to download. Save it in a location that you can find later. This is how it looks like when this page was accessed on 2023-02-16.\n\nThe step by step instructions are as follows.\n\n\n3.2.2 Step 1: Download and Install R for Windows\n\nGo to this page and download R. Then install it.\n\n\n3.2.3 Step 2: Download and Install RTools\n\nDownload RTools. This tool is needed because some packages in R need additional tools (to create the necessary development environment).\n\nDownload the version appropriate for your R version. If you installing the newest version of R then you should normally choose the latest version of RTools.\nAt the time or writing this document, Rtools 4.3 should be selected. On this page you will find a link Rtools43 installer (the link will be something like: https://cran.r-project.org/bin/windows/Rtools/rtools43/files/rtools43-5493-5475.exe). It is highly recommend that you download this file from the Rtools download page and NOT using the direct executable link.\n\n\n3.2.4 Step 3: Download and Install Rstudio\n\nDownload Rstudio. Once you are on this page, the website will automatically recognize that you are using a Windows operating system and it will present you the option to download RStudio Desktop software for your system. Click the link on that page to download. Save it in a location that you can find later.\nThe double click the executable file you just downloaded to install it. If you have difficulty installing a file or do not know how to do it, please search on YouTube for tutorials.\nYou are done!"
  },
  {
    "objectID": "analytic-process.html",
    "href": "analytic-process.html",
    "title": "10  Analytic Process",
    "section": "",
    "text": "In this chapter we outline and describe the analytic process. This is the heart of our book."
  },
  {
    "objectID": "applications.html#clinical-example",
    "href": "applications.html#clinical-example",
    "title": "5  Applications",
    "section": "5.1 Clinical example",
    "text": "5.1 Clinical example"
  },
  {
    "objectID": "applications.html#social-science-example",
    "href": "applications.html#social-science-example",
    "title": "5  Applications",
    "section": "5.2 Social science example",
    "text": "5.2 Social science example"
  },
  {
    "objectID": "intro2r.html#the-goal",
    "href": "intro2r.html#the-goal",
    "title": "2  R Fundamentals",
    "section": "2.1 The goal",
    "text": "2.1 The goal\nLearning a new program can be challenging and intimidating. If you have never programmed before, you may or may not feel it. However, if you have programmed in another language, you may feel a little uncomfortable at time because how R proceses certains aspects.\nWhatever may be your background, let keep the following principle in mind\n\nYou will face challenges as many things will go wrong\nHave patience. Things will turn in your favor. It’s only a matter of time\nIts a journey, and not a sprint. You have to pursue for a long time to achieve mastery or even a general understanding of the language. And this is true for any language. Think of who taught you your mother tougue? And exactly how long did it take to learn?"
  },
  {
    "objectID": "intro2r.html#setting-up-the-expectations",
    "href": "intro2r.html#setting-up-the-expectations",
    "title": "2  R Fundamentals",
    "section": "2.1 Setting up the Expectations",
    "text": "2.1 Setting up the Expectations\nLearning a new program can be challenging and intimidating. If you have never programmed before, you may or may not feel it. However, if you have programmed in another language, you may feel a little uncomfortable at time because how R process certain aspects.\nWhatever may be your background, let keep the following principle in mind\n\nYou will face challenges as many things will go wrong\nHave patience. Things will turn in your favor. It’s only a matter of time\nIts a journey, and not a sprint. You have to pursue for a long time to achieve mastery or even a general understanding of the language. And this is true for any language. Think of who taught you your mother tongue? And exactly how long did it take to learn?"
  },
  {
    "objectID": "intro2r.html#what-is-r",
    "href": "intro2r.html#what-is-r",
    "title": "2  R Fundamentals",
    "section": "2.2 What is R?",
    "text": "2.2 What is R?\nR is a language and programming environment, predominantly used by researchers, academicians, students in quantitative disciplines, and pharmaceutical companies. Note, I did not mention software engineers. Because they generally do not use R in their workflow."
  },
  {
    "objectID": "r.html#setting-up-the-expectations",
    "href": "r.html#setting-up-the-expectations",
    "title": "2  Step into R",
    "section": "2.1 Setting up the Expectations",
    "text": "2.1 Setting up the Expectations\nLearning a new program can be challenging and intimidating. If you have never programmed before, you may or may not feel it. However, if you have programmed in another language, you may feel a little uncomfortable at time because how R process certain aspects.\nWhatever may be your background, let keep the following principle in mind\n\nYou will face challenges as many things will go wrong\nHave patience. Things will turn in your favor. It’s only a matter of time\nIts a journey, and not a sprint. You have to pursue for a long time to achieve mastery or even a general understanding of the language. And this is true for any language. Think of who taught you your mother tongue? And exactly how long did it take to learn?"
  },
  {
    "objectID": "r.html#what-is-r",
    "href": "r.html#what-is-r",
    "title": "2  Step into R",
    "section": "2.2 What is R?",
    "text": "2.2 What is R?\nR is a language and programming environment, predominantly used by researchers, academicians, students in quantitative disciplines, and pharmaceutical companies. Note, I did not mention software engineers. Because they generally do not use R in their workflow.\n\n2.2.1 Who should learn R?\nAnyone involved in research activity where statistical analysis is necessary. R is best in this regard, hands down. With R, you can create a reproducible workflow producing the best possible outputs in a publication-ready format. As of writing this book, no other system can provide as much functionality off-the-shelf.\n\n\n2.2.2 Should data scientists learn R?\nIt depends on how you define data scientist. If ‘science’ part of data science is important to you, then R would be the first choice. On the other hand, if machine learning or algorithms primarily developed for prediction purposes, my personal recommendation would be to use Python based solutions.\nTo summarize, a language should be chosen based on the deliverable. Be language agnostic, use the tool that does the job best. However, sometimes you may have to use one or the other because the organization and their IT setup supports one particular language."
  },
  {
    "objectID": "r.html#r-language-basics",
    "href": "r.html#r-language-basics",
    "title": "2  Step into R",
    "section": "2.3 R Language Basics",
    "text": "2.3 R Language Basics\n\nData types\nMath operations\nMatrix, list\n\nCommonly used functions\n\napply, lapply family of functions\n\n\n\n\n2.3.1 Interacting with R\nOnce R is installed in your system, you can directly execute programs and computations by ‘submitting’ them to the R engine.\nIn this book, we will use Rstudio (which will be renamed to POSIT at sometime in the future) to interact with R. That is, we won’t submit code to R ourselves but we will use the RStudio IDE to do that for us. We will instead focus or coding and keeping things organized in a nicer way.\n\n2.3.1.1 Mathematical operations\nTo get started with R, what better way to introduce to R but to start using it. And we use it as what we are most familiar with– as a calculator.\nOn the R console, type 1 + 1 and it will print the result of adding 1 and 1. Let’s see it in action.\n\n1 + 2\n\n[1] 3\n\n\nSimilarly, for subtraction, multiplication, and division\n\n# Showing a subtraction operation\n 10 - 2\n\n[1] 8\n\n# Showing a multiplication operation\n10 * 2\n\n[1] 20\n\n# Demonstrating division operation\n10 / 2\n\n[1] 5\n\n# Exponentiation\nexp(2)\n\n[1] 7.389056\n\n# Log operation (natural logarithm or ln)\nlog(exp(2))\n\n[1] 2\n\n# Log operation (10 base)\nlog10(10)\n\n[1] 1\n\n\n\n\n2.3.1.2 Exercise\n\nWhat would be output of the following operation?\n\n\n(10 + 20) * 2.5 / (exp(1))\n\npaste(\"The sum of \", 1, ' and ', 2, ' is ', 1+2)"
  },
  {
    "objectID": "r.html#r-for-data-analysis",
    "href": "r.html#r-for-data-analysis",
    "title": "2  Step into R",
    "section": "2.6 R for Data Analysis",
    "text": "2.6 R for Data Analysis\nIntroduce tidyverse ecosystem for data analysis"
  },
  {
    "objectID": "r.html#data-visualization",
    "href": "r.html#data-visualization",
    "title": "2  Step into R",
    "section": "2.7 Data Visualization",
    "text": "2.7 Data Visualization\n\nggplot\nsimplevis\n\n\n2.7.1 Data generation and simulation"
  },
  {
    "objectID": "r.html#data-types",
    "href": "r.html#data-types",
    "title": "2  Step into R",
    "section": "2.4 Data Types",
    "text": "2.4 Data Types\nR’s data types are a bit complex. To keep it simple, everything in R can be thought of as vector. Vectors are of two kinds.\n\nAtomic vector (all elements must be of same type)\nList (elements can be of different types)\n\n\n\n\n\n\n\nAtomic vectors are of several types as shown in the diagram below.\n\n\n\n\n\n\n\n2.4.1 Atomic Vector\nBefore discussing vectors, we first need to understand the term scalar. A scalar is a single value or an individual value. For example, age of a single individual when collected for recording is a scalar. But age of several individuals collected together can form a vector.\nIn most practical situations we work with a vector, which is a collection of scalars of the same type.\nIn R, we create a collection of values into a vector by the c() function. The c in c() is short for combine.\nLet us create four types of atomic vectors.\n\nlogical_vec = c(TRUE, TRUE, F, T)\ndouble_vec = c(1, 2, 10, 5)\ninteger_vec = c(1L, 2L, 10L, 5L)\ncharacter_vec = c('Dhaka', 'New York', 'Anything')\n\nTo check the type of each vector, use the typeof() function.\n\ntypeof(logical_vec)\n\n[1] \"logical\"\n\ntypeof(double_vec)\n\n[1] \"double\"\n\ntypeof(integer_vec)\n\n[1] \"integer\"\n\ntypeof(character_vec)\n\n[1] \"character\"\n\n\n\nas.integer(10L/3L)\n\n[1] 3\n\n\n\n\n2.4.2 Matrix\nMatrices are atomic vectors but with attributes. For example, matrices have dimensions, which can be viewed with the dim() function. In the example below, an atomic vector is assinged a dimension attribute of \\(2 \\times 2\\) and we read it as two-by-two. This means there are two rows and two columns of this object.\n\na = c(1, 2, 3, 4)\ndim(a) = c(2,2)\na\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\nWe can also create matrix using matrix() function as follows\n\na = matrix(1:10, nrow = 2, ncol = 5)\na\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n\n\nDimension of this matrix is 2, 5, which means there are 2 rows and 5 columns.\nTo learn more about an R function, use the question mark (?) before the function name. For example, to learn about matrix function, type ?matrix on the R console. The space between ? and matrix is also permitted–i.e., ? matrix (notice the space in between) will display the documentation about matrix.\n\n\n2.4.3 List\nList is also a vector but it is a collection of one or more atomic vectors. To create a list, we combine one or more atomic vectors and wrap it around the function list()\n\na = list(\n  1:10,\n  c(T, F, F)\n)\na\n\n[[1]]\n [1]  1  2  3  4  5  6  7  8  9 10\n\n[[2]]\n[1]  TRUE FALSE FALSE\n\n\nType of a is list as shown below.\n\ntypeof(a)\n\n[1] \"list\"\n\n\nElements of a list can be named.\n\na = list(\n  series = 1:10,\n  series2 = c(1, 10),\n  tf = c(T, F, F)\n)\n\na\n\n$series\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$series2\n[1]  1 10\n\n$tf\n[1]  TRUE FALSE FALSE\n\n\nTo view the structure of an R object, use the str() function.\n\nstr(a)\n\nList of 3\n $ series : int [1:10] 1 2 3 4 5 6 7 8 9 10\n $ series2: num [1:2] 1 10\n $ tf     : logi [1:3] TRUE FALSE FALSE\n\n\n\n\n2.4.4 Exercise\nPut some quiz questions about the data types discussed so far. Use the list below for guidance.\n\nAtomic vector\nScalar\nInteger, Logical, Character, Double\nList\nMatrix\nDimension of a matrix"
  },
  {
    "objectID": "r.html#data-frame-and-tibble",
    "href": "r.html#data-frame-and-tibble",
    "title": "2  Step into R",
    "section": "2.5 Data Frame and Tibble",
    "text": "2.5 Data Frame and Tibble\nData frame is the most important concept in R. It was unique when it was introduced. Later, the idea was brought into Python via the Pandas library. Still widely used data structure, data.frame has its one issues, which is beyond the scope of this course. To overcome some of those issues, tibble was introduced by Wickham et al. (2018).\n\n2.5.1 Data Frame\nData frames are created using the data.frame() function by supplying a list of columns. data.frames, as it is typically referred to are of list data type with one important distinction. List can have elements of unequal length. In data.frame, all the elements must have the same length to make the data.frame a true rectangular array.\n\ndf = data.frame(\n  x = 1:5,\n  age = c(10, 11, 20, 30, 32),\n  sex = c('M', 'F', 'F', 'M', 'M')\n)\ndf\n\n  x age sex\n1 1  10   M\n2 2  11   F\n3 3  20   F\n4 4  30   M\n5 5  32   M\n\nstr(df)\n\n'data.frame':   5 obs. of  3 variables:\n $ x  : int  1 2 3 4 5\n $ age: num  10 11 20 30 32\n $ sex: chr  \"M\" \"F\" \"F\" \"M\" ...\n\n\nWe can create data.frame from a list as well.\n\ndf_list = list(\n  x = 1:5,\n  age = c(10, 11, 20, 30, 32), \n  sex = c('M', 'F', 'F', 'M', 'M')\n)\ndf = data.frame(df_list)\n\ndf\n\n  x age sex\n1 1  10   M\n2 2  11   F\n3 3  20   F\n4 4  30   M\n5 5  32   M\n\n\n\n\n2.5.2 Tibble\nFor the most part, we as a user of dataframes won’t notice the difference. All differences are under-the-hood. For those interested to learn two important distinctions between the two, please visit this link.\nWe will revisit tibbles shortly.\nDo we care whether it’s a tibble or a data.frame? For the most part, the answer is no. But the R ecosystem is evolving and newer libraries will likely use tibble as the default replacement for data.frame."
  },
  {
    "objectID": "r.html",
    "href": "r.html",
    "title": "2  Step into R",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "dataframe.html",
    "href": "dataframe.html",
    "title": "4  Working with data.frame",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "dataframe.html#setting-up-the-expectations",
    "href": "dataframe.html#setting-up-the-expectations",
    "title": "3  Step into R",
    "section": "3.1 Setting up the Expectations",
    "text": "3.1 Setting up the Expectations\nLearning a new program can be challenging and intimidating. If you have never programmed before, you may or may not feel it. However, if you have programmed in another language, you may feel a little uncomfortable at time because how R process certain aspects.\nWhatever may be your background, let keep the following principle in mind\n\nYou will face challenges as many things will go wrong\nHave patience. Things will turn in your favor. It’s only a matter of time\nIts a journey, and not a sprint. You have to pursue for a long time to achieve mastery or even a general understanding of the language. And this is true for any language. Think of who taught you your mother tongue? And exactly how long did it take to learn?"
  },
  {
    "objectID": "dataframe.html#what-is-r",
    "href": "dataframe.html#what-is-r",
    "title": "3  Step into R",
    "section": "3.2 What is R?",
    "text": "3.2 What is R?\nR is a language and programming environment, predominantly used by researchers, academicians, students in quantitative disciplines, and pharmaceutical companies. Note, I did not mention software engineers. Because they generally do not use R in their workflow.\n\n3.2.1 Who should learn R?\nAnyone involved in research activity where statistical analysis is necessary. R is best in this regard, hands down. With R, you can create a reproducible workflow producing the best possible outputs in a publication-ready format. As of writing this book, no other system can provide as much functionality off-the-shelf.\n\n\n3.2.2 Should data scientists learn R?\nIt depends on how you define data scientist. If ‘science’ part of data science is important to you, then R would be the first choice. On the other hand, if machine learning or algorithms primarily developed for prediction purposes, my personal recommendation would be to use Python based solutions.\nTo summarize, a language should be chosen based on the deliverable. Be language agnostic, use the tool that does the job best. However, sometimes you may have to use one or the other because the organization and their IT setup supports one particular language."
  },
  {
    "objectID": "dataframe.html#r-language-basics",
    "href": "dataframe.html#r-language-basics",
    "title": "3  Step into R",
    "section": "3.3 R Language Basics",
    "text": "3.3 R Language Basics\n\nData types\nMath operations\nMatrix, list\n\nCommonly used functions\n\napply, lapply family of functions\n\n\n\n\n3.3.1 Interacting with R\nOnce R is installed in your system, you can directly execute programs and computations by ‘submitting’ them to the R engine.\nIn this book, we will use Rstudio (which will be renamed to POSIT at sometime in the future) to interact with R. That is, we won’t submit code to R ourselves but we will use the RStudio IDE to do that for us. We will instead focus or coding and keeping things organized in a nicer way.\n\n3.3.1.1 Mathematical operations\nTo get started with R, what better way to introduce to R but to start using it. And we use it as what we are most familiar with– as a calculator.\nOn the R console, type 1 + 1 and it will print the result of adding 1 and 1. Let’s see it in action.\n\n1 + 2\n\n[1] 3\n\n\nSimilarly, for subtraction, multiplication, and division\n\n# Showing a subtraction operation\n 10 - 2\n\n[1] 8\n\n# Showing a multiplication operation\n10 * 2\n\n[1] 20\n\n# Demonstrating division operation\n10 / 2\n\n[1] 5\n\n# Exponentiation\nexp(2)\n\n[1] 7.389056\n\n# Log operation (natural logarithm or ln)\nlog(exp(2))\n\n[1] 2\n\n# Log operation (10 base)\nlog10(10)\n\n[1] 1\n\n\n\n\n3.3.1.2 Exercise\n\nWhat would be output of the following operation?\n\n\n(10 + 20) * 2.5 / (exp(1))\n\npaste(\"The sum of \", 1, ' and ', 2, ' is ', 1+2)"
  },
  {
    "objectID": "dataframe.html#data-types",
    "href": "dataframe.html#data-types",
    "title": "3  Step into R",
    "section": "3.4 Data Types",
    "text": "3.4 Data Types\nR’s data types are a bit complex. To keep it simple, everything in R can be thought of as vector. Vectors are of two kinds.\n\nAtomic vector (all elements must be of same type)\nList (elements can be of different types)\n\n\n\n\n\n\n\nAtomic vectors are of several types as shown in the diagram below.\n\n\n\n\n\n\n\n3.4.1 Atomic Vector\nBefore discussing vectors, we first need to understand the term scalar. A scalar is a single value or an individual value. For example, age of a single individual when collected for recording is a scalar. But age of several individuals collected together can form a vector.\nIn most practical situations we work with a vector, which is a collection of scalars of the same type.\nIn R, we create a collection of values into a vector by the c() function. The c in c() is short for combine.\nLet us create four types of atomic vectors.\n\nlogical_vec = c(TRUE, TRUE, F, T)\ndouble_vec = c(1, 2, 10, 5)\ninteger_vec = c(1L, 2L, 10L, 5L)\ncharacter_vec = c('Dhaka', 'New York', 'Anything')\n\nTo check the type of each vector, use the typeof() function.\n\ntypeof(logical_vec)\n\n[1] \"logical\"\n\ntypeof(double_vec)\n\n[1] \"double\"\n\ntypeof(integer_vec)\n\n[1] \"integer\"\n\ntypeof(character_vec)\n\n[1] \"character\"\n\n\n\nas.integer(10L/3L)\n\n[1] 3\n\n\n\n\n3.4.2 Matrix\nMatrices are atomic vectors but with attributes. For example, matrices have dimensions, which can be viewed with the dim() function. In the example below, an atomic vector is assinged a dimension attribute of \\(2 \\times 2\\) and we read it as two-by-two. This means there are two rows and two columns of this object.\n\na = c(1, 2, 3, 4)\ndim(a) = c(2,2)\na\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\nWe can also create matrix using matrix() function as follows\n\na = matrix(1:10, nrow = 2, ncol = 5)\na\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n\n\nDimension of this matrix is 2, 5, which means there are 2 rows and 5 columns.\nTo learn more about an R function, use the question mark (?) before the function name. For example, to learn about matrix function, type ?matrix on the R console. The space between ? and matrix is also permitted–i.e., ? matrix (notice the space in between) will display the documentation about matrix.\n\n\n3.4.3 List\nList is also a vector but it is a collection of one or more atomic vectors. To create a list, we combine one or more atomic vectors and wrap it around the function list()\n\na = list(\n  1:10,\n  c(T, F, F)\n)\na\n\n[[1]]\n [1]  1  2  3  4  5  6  7  8  9 10\n\n[[2]]\n[1]  TRUE FALSE FALSE\n\n\nType of a is list as shown below.\n\ntypeof(a)\n\n[1] \"list\"\n\n\nElements of a list can be named.\n\na = list(\n  series = 1:10,\n  series2 = c(1, 10),\n  tf = c(T, F, F)\n)\n\na\n\n$series\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$series2\n[1]  1 10\n\n$tf\n[1]  TRUE FALSE FALSE\n\n\nTo view the structure of an R object, use the str() function.\n\nstr(a)\n\nList of 3\n $ series : int [1:10] 1 2 3 4 5 6 7 8 9 10\n $ series2: num [1:2] 1 10\n $ tf     : logi [1:3] TRUE FALSE FALSE\n\n\n\n\n3.4.4 Exercise\nPut some quiz questions about the data types discussed so far. Use the list below for guidance.\n\nAtomic vector\nScalar\nInteger, Logical, Character, Double\nList\nMatrix\nDimension of a matrix"
  },
  {
    "objectID": "dataframe.html#data-frame-and-tibble",
    "href": "dataframe.html#data-frame-and-tibble",
    "title": "3  Step into R",
    "section": "3.5 Data Frame and Tibble",
    "text": "3.5 Data Frame and Tibble\nData frame is the most important concept in R. It was unique when it was introduced. Later, the idea was brought into Python via the Pandas library. Still widely used data structure, data.frame has its one issues, which is beyond the scope of this course. To overcome some of those issues, tibble was introduced by Wickham et al. (2018).\n\n3.5.1 Data Frame\nData frames are created using the data.frame() function by supplying a list of columns. data.frames, as it is typically referred to are of list data type with one important distinction. List can have elements of unequal length. In data.frame, all the elements must have the same length to make the data.frame a true rectangular array.\n\ndf = data.frame(\n  x = 1:5,\n  age = c(10, 11, 20, 30, 32),\n  sex = c('M', 'F', 'F', 'M', 'M')\n)\ndf\n\n  x age sex\n1 1  10   M\n2 2  11   F\n3 3  20   F\n4 4  30   M\n5 5  32   M\n\nstr(df)\n\n'data.frame':   5 obs. of  3 variables:\n $ x  : int  1 2 3 4 5\n $ age: num  10 11 20 30 32\n $ sex: chr  \"M\" \"F\" \"F\" \"M\" ...\n\n\nWe can create data.frame from a list as well.\n\ndf_list = list(\n  x = 1:5,\n  age = c(10, 11, 20, 30, 32), \n  sex = c('M', 'F', 'F', 'M', 'M')\n)\ndf = data.frame(df_list)\n\ndf\n\n  x age sex\n1 1  10   M\n2 2  11   F\n3 3  20   F\n4 4  30   M\n5 5  32   M\n\n\n\n\n3.5.2 Tibble\nFor the most part, we as a user of dataframes won’t notice the difference. All differences are under-the-hood. For those interested to learn two important distinctions between the two, please visit this link.\nWe will revisit tibbles shortly.\nDo we care whether it’s a tibble or a data.frame? For the most part, the answer is no. But the R ecosystem is evolving and newer libraries will likely use tibble as the default replacement for data.frame."
  },
  {
    "objectID": "dataframe.html#r-for-data-analysis",
    "href": "dataframe.html#r-for-data-analysis",
    "title": "4  Working with data.frame",
    "section": "4.2 R for Data Analysis",
    "text": "4.2 R for Data Analysis\nIntroduce tidyverse ecosystem for data analysis"
  },
  {
    "objectID": "dataframe.html#data-visualization",
    "href": "dataframe.html#data-visualization",
    "title": "4  Working with data.frame",
    "section": "4.3 Data Visualization",
    "text": "4.3 Data Visualization\n\nggplot\nsimplevis\n\n\n4.3.1 Data generation and simulation"
  },
  {
    "objectID": "dataframe.html#data-frame",
    "href": "dataframe.html#data-frame",
    "title": "4  Working with data.frame",
    "section": "4.1 Data Frame",
    "text": "4.1 Data Frame\nData frames are created using the data.frame() function by supplying a list of columns. data.frames, as it is typically referred to are of list data type with one important distinction. List can have elements of unequal length. In data.frame, all the elements must have the same length to make the data.frame a true rectangular array.\n\nmy_list = list(\n  serial = 1:5,\n  age = c(10, 11, 20, 30, 32), \n  sex = c('M', 'F', 'F', 'M', 'M')\n)\ndf = data.frame(my_list)\n\ndf\n\n  serial age sex\n1      1  10   M\n2      2  11   F\n3      3  20   F\n4      4  30   M\n5      5  32   M\n\n\nIf you look at the data type for df using typeof(df), you will see its a list.\n\ntypeof(df)\n\n[1] \"list\"\n\n\nTo view the structure of df object\n\nstr(df)\n\n'data.frame':   5 obs. of  3 variables:\n $ serial: int  1 2 3 4 5\n $ age   : num  10 11 20 30 32\n $ sex   : chr  \"M\" \"F\" \"F\" \"M\" ..."
  },
  {
    "objectID": "datatypes.html",
    "href": "datatypes.html",
    "title": "3  Data Types",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "datatypes.html#data-frame-and-tibble",
    "href": "datatypes.html#data-frame-and-tibble",
    "title": "3  Data Types",
    "section": "3.5 Data Frame and Tibble",
    "text": "3.5 Data Frame and Tibble\nData frame is the most important concept in R. It was unique when it was introduced. Later, the idea was brought into Python via the Pandas library. Still widely used data structure, data.frame has its one issues, which is beyond the scope of this course. To overcome some of those issues, tibble was introduced by Wickham et al. (2018).\n\n3.5.1 Data Frame\nData frames are created using the data.frame() function by supplying a list of columns. data.frames, as it is typically referred to are of list data type with one important distinction. List can have elements of unequal length. In data.frame, all the elements must have the same length to make the data.frame a true rectangular array.\n\ndf = data.frame(\n  age = c(10, 11, 20, 30, 32),\n  sex = c('M', 'F', 'F', 'M', 'M')\n)\ndf\n\n  age sex\n1  10   M\n2  11   F\n3  20   F\n4  30   M\n5  32   M\n\nstr(df)\n\n'data.frame':   5 obs. of  2 variables:\n $ age: num  10 11 20 30 32\n $ sex: chr  \"M\" \"F\" \"F\" \"M\" ...\n\n\nWe can create data.frame from a list as well by wrapping the list object with the data.frame() function.\n\nmy_list = list(\n  serial = 1:5,\n  age = c(10, 11, 20, 30, 32), \n  sex = c('M', 'F', 'F', 'M', 'M')\n)\ndf = data.frame(my_list)\n\ndf\n\n  serial age sex\n1      1  10   M\n2      2  11   F\n3      3  20   F\n4      4  30   M\n5      5  32   M\n\n\n\n\n3.5.2 Tibble\nFor the most part, we as a user of dataframes won’t notice the difference. All differences are under-the-hood. For those interested to learn two important distinctions between the two, please visit this link.\nWe will revisit tibbles shortly.\nDo we care whether it’s a tibble or a data.frame? For the most part, the answer is no. But the R ecosystem is evolving and newer libraries will likely use tibble as the default replacement for data.frame."
  },
  {
    "objectID": "datatypes.html#atomic-vector",
    "href": "datatypes.html#atomic-vector",
    "title": "3  Data Types",
    "section": "3.1 Atomic Vector",
    "text": "3.1 Atomic Vector\nBefore discussing vectors, we first need to understand the term scalar. A scalar is a single value or an individual value. For example, age of a single individual when collected for recording is a scalar. But age of several individuals collected together can form a vector.\nIn most practical situations we work with a vector, which is a collection of scalars of the same type.\nIn R, we create a collection of values into a vector by the c() function. The c in c() is short for combine.\nLet us create four types of atomic vectors.\n\nlogical_vec = c(TRUE, TRUE, F, T)\ndouble_vec = c(1, 2, 10, 5)\ninteger_vec = c(1L, 2L, 10L, 5L)\ncharacter_vec = c('Dhaka', 'New York', 'Anything')\n\nTo check the type of each vector, use the typeof() function.\n\ntypeof(logical_vec)\n\n[1] \"logical\"\n\ntypeof(double_vec)\n\n[1] \"double\"\n\ntypeof(integer_vec)\n\n[1] \"integer\"\n\ntypeof(character_vec)\n\n[1] \"character\"\n\n\n\nas.integer(10L/3L)\n\n[1] 3"
  },
  {
    "objectID": "datatypes.html#matrix",
    "href": "datatypes.html#matrix",
    "title": "3  Data Types",
    "section": "3.2 Matrix",
    "text": "3.2 Matrix\nMatrices are atomic vectors but with attributes. For example, matrices have dimensions, which can be viewed with the dim() function. In the example below, an atomic vector is assinged a dimension attribute of \\(2 \\times 2\\) and we read it as two-by-two. This means there are two rows and two columns of this object.\n\na = c(1, 2, 3, 4)\ndim(a) = c(2,2)\na\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n\nWe can also create matrix using matrix() function as follows\n\na = matrix(1:10, nrow = 2, ncol = 5)\na\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n\n\nDimension of this matrix is 2, 5, which means there are 2 rows and 5 columns.\nTo learn more about an R function, use the question mark (?) before the function name. For example, to learn about matrix function, type ?matrix on the R console. The space between ? and matrix is also permitted–i.e., ? matrix (notice the space in between) will display the documentation about matrix.\n\n3.2.1 Elements Recycling\nOne important aspect of a matrix data type is that if the total number of elements is not the same as nrow \\(\\times\\) ncol, then the numbers will be recycled. See for example, we are creating a matrix with only 9 elements as created by 1:9. However, the nrow = 2 and ncol = 5 indicates there should be 2 \\(\\times\\) 5 = 10 elements. Since we have 9 elements to fill 10 spaces, it will start recycling from the beginning. A warning will be printed. Note, this is just a warning, and R will not stop processing the computation because of it.\n\na = matrix(1:9, nrow = 2, ncol = 5)\n\nWarning in matrix(1:9, nrow = 2, ncol = 5): data length [9] is not a sub-\nmultiple or multiple of the number of rows [2]\n\na\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8    1\n\n\nTry another one\n\na = matrix(1:5, nrow = 2, ncol = 5)\na\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    2    4\n[2,]    2    4    1    3    5\n\n\n\n\n\n\n\n\nNote\n\n\n\nDid you notice in what order R fills the cells of a matrix? We are filling 1:5 in the 10 cells and R is filling them column-wise. That is, it first fills the first column and all the rows therein. Then moves to second column and fills all the rows until it exhausts the elements before recycling.\n\n\n\n\n\n\n\n\nHow to fill row-wise?\n\n\n\nWhat if you wanted to fill the elements row-wise? Can you figure out how to do that? Hint: open the documentation for matrix using ? matrix on the R console. Then look for parameter byrow = FALSE which is the default. Change it to byrow = TRUE to fill the values row-wise.\n\n\nLets try that with the byrow = TRUE argument.\n\na = matrix(1:5, nrow = 2, ncol = 5, byrow = TRUE)\na\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    1    2    3    4    5\n\n\nIt now fills the elements row-wise. It fills the first row and all column therein. Then moves to the second row and fills all the columns in second row, and so on."
  },
  {
    "objectID": "part2.html",
    "href": "part2.html",
    "title": "Part II: R",
    "section": "",
    "text": "In this section we gently introduce R and how to work with it"
  },
  {
    "objectID": "datatypes.html#list",
    "href": "datatypes.html#list",
    "title": "3  Data Types",
    "section": "3.3 List",
    "text": "3.3 List\nList is also a vector but it is a collection of one or more atomic vectors. To create a list, we combine one or more atomic vectors and wrap it around the function list()\n\na = list(\n  1:10,\n  c(T, F, F)\n)\na\n\n[[1]]\n [1]  1  2  3  4  5  6  7  8  9 10\n\n[[2]]\n[1]  TRUE FALSE FALSE\n\n\nType of a is list as shown below.\n\ntypeof(a)\n\n[1] \"list\"\n\n\nElements of a list can be named.\n\na = list(\n  series = 1:10,\n  series2 = c(1, 10),\n  tf = c(T, F, F)\n)\n\na\n\n$series\n [1]  1  2  3  4  5  6  7  8  9 10\n\n$series2\n[1]  1 10\n\n$tf\n[1]  TRUE FALSE FALSE\n\n\nTo view the structure of an R object, use the str() function.\n\nstr(a)\n\nList of 3\n $ series : int [1:10] 1 2 3 4 5 6 7 8 9 10\n $ series2: num [1:2] 1 10\n $ tf     : logi [1:3] TRUE FALSE FALSE\n\n\n\n3.3.1 Exercise\nPut some quiz questions about the data types discussed so far. Use the list below for guidance.\n\nAtomic vector\nScalar\nInteger, Logical, Character, Double\nList\nMatrix\nDimension of a matrix"
  },
  {
    "objectID": "datatypes.html#did-you-notice",
    "href": "datatypes.html#did-you-notice",
    "title": "3  Data Types",
    "section": "3.3 Did you notice",
    "text": "3.3 Did you notice"
  },
  {
    "objectID": "dataframe.html#attributes-of-data-frame",
    "href": "dataframe.html#attributes-of-data-frame",
    "title": "4  Working with data.frame",
    "section": "4.2 Attributes of Data Frame",
    "text": "4.2 Attributes of Data Frame\nAs mentioned earlier, matrix and data frame are collection of vectors but they have additional characteristics called ‘attributes’. R’s data frame is a named list of vectors with the following attributes:\n\ncolumn names (names)\nrow names (row.names)\nclass (class)\n\nLets see the attributes of the df data frame object.\n\nattributes(df)\n\n$names\n[1] \"serial\" \"age\"    \"sex\"   \n\n$class\n[1] \"data.frame\"\n\n$row.names\n[1] 1 2 3 4 5\n\n\nBecause they are attributes of an object, these functions can be used to extract these attributes from these objects. Thus, to know the column names sumply use the names() function as follows.\n\nnames(df)\n\n[1] \"serial\" \"age\"    \"sex\"   \n\n\nLikewise, to get the row names, use row.names(df) and to get the class of the object, use `class(df)\n\nrow.names(df)\n\n[1] \"1\" \"2\" \"3\" \"4\" \"5\"\n\nclass(df)\n\n[1] \"data.frame\"\n\n\n\n\n\n\n\n\narrtibutes are not the same as the elements of a list\n\n\n\nYou might be thinking that you can extract the names using the $ operator. They are not elements of the list. These are simply attributes which cannot be extracted using df$names\n\n\n\ndf$names\n\nNULL\n\ndf$class\n\nNULL\n\ndf$row.names\n\nNULL\n\n\n\n4.2.1 Exercise\n\nCreate a matrix object and explore its attributes. What difference do you see from the attribtues of a data frame?\n\n\nx = matrix(1:10, ncol=2)\nx\nattributes(x)\n\n\nCreate a list object and explore its attributes.\nCreate a data frame object and expore its attributes."
  },
  {
    "objectID": "subsetting.html",
    "href": "subsetting.html",
    "title": "6  Subsetting",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "subsetting.html#subsetting-atomic-vector",
    "href": "subsetting.html#subsetting-atomic-vector",
    "title": "6  Subsetting",
    "section": "6.1 Subsetting Atomic Vector",
    "text": "6.1 Subsetting Atomic Vector\n\n6.1.1 Using integer position\nThere are six ways to subset an atomic vector. However, we will focus on two that you can reuse for other data types.\nFirst, there are three subsetting operators. These are [, [[, and $. Let’s see an example.\n\nmy_vec = c(10.1, 2.2, 32.3, 5.4)\n\nThe number after the decimals indicate the actual position of the elements. If we want to select the first element of the vector, we use the vector name and within the bracket, put the position of the element. my_vec[1] will give your the first element of my_vec.\n\nmy_vec[1]\n\n[1] 10.1\n\n\nNotice that we used 1 to identify the first element. In R, the index starts at 1. In many popular programming languages such as Python and Java, the index starts at zero. Just keep this in mind.\nTo extract the second element, use [2]\n\nmy_vec[2]\n\n[1] 2.2\n\n\nHow about extracting multiple elements? Not a problem. Just combine the element’s positions with the c() function and wrap that with the subsetting operator [ on the my_vec object\n\n# extract the first and third element\nmy_vec[c(1, 3)] # subsetting with integer position\n\n[1] 10.1 32.3\n\n\nTo exclude an element at a particular position, negate the function as -c()\n\n# exclude the second element\nmy_vec[-c(2)]\n\n[1] 10.1 32.3  5.4\n\n\nHowever, we cannot include and exclude at the same time.\n\n# keep first element but exclude the second\nmy_vec[c(1, -2)] # only 0's may be mixed with negative subscripts\n\n\n\n6.1.2 Using logical vectors\nWe want to select all the elements that are bigger than 9. First we create a logical vector that satisfies our conditions\n\nmy_vec > 9\n\n[1]  TRUE FALSE  TRUE FALSE\n\n# check the type of the resulting vector\ntypeof(my_vec > 9)\n\n[1] \"logical\"\n\n\nNow apply the resulting logical vector to subsetting from my_vec to return only the elements where the condition (greater than 9) is TRUE\n\nmy_vec[my_vec > 9] # subsetting with logical vector\n\n[1] 10.1 32.3\n\n\n\n\n\n\n\n\nUse logical vector instead of for loop\n\n\n\nUsing logical vector to subsetting is extremely fast. In R, try to avoid for loops. Instead, use logical vector for vectorized computation."
  },
  {
    "objectID": "subsetting.html#subsetting-matrix",
    "href": "subsetting.html#subsetting-matrix",
    "title": "6  Subsetting",
    "section": "6.2 Subsetting Matrix",
    "text": "6.2 Subsetting Matrix\nSince matrix is a two-dimensional object which has a row and a column, the subsetting must utilize its dimensions.\nLet us create a matrix my_mat whose elements 1:50 are arranged in 10 rows and 5 columns.\n\nmy_mat = matrix(1:50, nrow = 10, ncol = 5)\nmy_mat\n\n      [,1] [,2] [,3] [,4] [,5]\n [1,]    1   11   21   31   41\n [2,]    2   12   22   32   42\n [3,]    3   13   23   33   43\n [4,]    4   14   24   34   44\n [5,]    5   15   25   35   45\n [6,]    6   16   26   36   46\n [7,]    7   17   27   37   47\n [8,]    8   18   28   38   48\n [9,]    9   19   29   39   49\n[10,]   10   20   30   40   50\n\n\nFirst element is 1 which is located at the first-row and first-column. That is, the location of the first element is [1, 1], where the first element represents the row-position, and the second element represents the column-position.\n\n# extract the first element\nmy_mat[1,1]\n\n[1] 1\n\n\n\n6.2.1 Subsetting entire row of a matrix\n\n# subset the first row\nmy_mat[1, ]\n\n[1]  1 11 21 31 41\n\n\n\n\n6.2.2 Subsetting multiple rows of a matrix\n\n# subset rows 1, 2, and 4 and return all columns\nmy_mat[c(1, 2, 4), ]\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1   11   21   31   41\n[2,]    2   12   22   32   42\n[3,]    4   14   24   34   44\n\n\n\n\n6.2.3 Subsetting a column\n\n# subset the second columns and keep values in all rows\nmy_mat[ , 2]\n\n [1] 11 12 13 14 15 16 17 18 19 20"
  },
  {
    "objectID": "subsetting.html#subsetting-data-frame",
    "href": "subsetting.html#subsetting-data-frame",
    "title": "6  Subsetting",
    "section": "6.4 Subsetting Data Frame",
    "text": "6.4 Subsetting Data Frame\nData frames are created using the data.frame() function by supplying a list of columns. data.frames, as it is typically referred to are of list data type with one important distinction. List can have elements of unequal length. In data.frame, all the elements must have the same length to make the data.frame a true rectangular array.\n\nx = c(1, 2, 3)\nmy_list = list(\n  serial = 1:5,\n  age = c(10, 11, 20, 30, 32), \n  sex = c('M', 'F', 'F', 'M', 'M')\n)\ndf = data.frame(my_list)\n\ndf\n\n  serial age sex\n1      1  10   M\n2      2  11   F\n3      3  20   F\n4      4  30   M\n5      5  32   M\n\n\nIf you look at the data type for df using typeof(df), you will see its a list.\n\ntypeof(df)\n\n[1] \"list\"\n\n\nTo view the structure of df object\n\nstr(df)\n\n'data.frame':   5 obs. of  3 variables:\n $ serial: int  1 2 3 4 5\n $ age   : num  10 11 20 30 32\n $ sex   : chr  \"M\" \"F\" \"F\" \"M\" ...\n\n\nTo select the columns, we use $ operator to subset a column\n\ndf$age\n\n[1] 10 11 20 30 32\n\ndf$serial\n\n[1] 1 2 3 4 5\n\ndf$sex\n\n[1] \"M\" \"F\" \"F\" \"M\" \"M\"\n\n\nThe data type of the extracted column age is double. Likewise, the data type of sex is character.\n\n6.4.1 Selecting rows using conditions\nSelect all rows where the sex is male\n\ndf$sex\n\n[1] \"M\" \"F\" \"F\" \"M\" \"M\"\n\ndf$sex == 'M'\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE\n\n# subset the males\ndf[df$sex == 'M', ]\n\n  serial age sex\n1      1  10   M\n4      4  30   M\n5      5  32   M\n\n\nIf you want to select only age and sex of the data frame where sex = M\n\ndf[df$sex == 'M', c('age', 'sex')]\n\n  age sex\n1  10   M\n4  30   M\n5  32   M\n\n\nAlternatively we could use the column position integers to select the columns\n\ndf[df$sex == 'M', c(2, 3)]\n\n  age sex\n1  10   M\n4  30   M\n5  32   M"
  },
  {
    "objectID": "subsetting.html#attributes-of-data-frame",
    "href": "subsetting.html#attributes-of-data-frame",
    "title": "6  Subsetting",
    "section": "6.4 Attributes of Data Frame",
    "text": "6.4 Attributes of Data Frame\nAs mentioned earlier, matrix and data frame are collection of vectors but they have additional characteristics called ‘attributes’. R’s data frame is a named list of vectors with the following attributes:\n\ncolumn names (names)\nrow names (row.names)\nclass (class)\n\nLets see the attributes of the df data frame object.\n\nattributes(df)\n\n$names\n[1] \"serial\" \"age\"    \"sex\"   \n\n$class\n[1] \"data.frame\"\n\n$row.names\n[1] 1 2 3 4 5\n\n\nBecause they are attributes of an object, these functions can be used to extract these attributes from these objects. Thus, to know the column names sumply use the names() function as follows.\n\nnames(df)\n\n[1] \"serial\" \"age\"    \"sex\"   \n\n\nLikewise, to get the row names, use row.names(df) and to get the class of the object, use `class(df)\n\nrow.names(df)\n\n[1] \"1\" \"2\" \"3\" \"4\" \"5\"\n\nclass(df)\n\n[1] \"data.frame\"\n\n\n\n\n\n\n\n\narrtibutes are not the same as the elements of a list\n\n\n\nYou might be thinking that you can extract the names using the $ operator. They are not elements of the list. These are simply attributes which cannot be extracted using df$names\n\n\n\ndf$names\n\nNULL\n\ndf$class\n\nNULL\n\ndf$row.names\n\nNULL\n\n\n\n6.4.1 Exercise\n\nCreate a matrix object and explore its attributes. What difference do you see from the attribtues of a data frame?\n\n\nx = matrix(1:10, ncol=2)\nx\nattributes(x)\n\n\nCreate a list object and explore its attributes.\nCreate a data frame object and explore its attributes."
  },
  {
    "objectID": "subsetting.html#object-browser",
    "href": "subsetting.html#object-browser",
    "title": "5  Subsetting",
    "section": "5.1 Object browser",
    "text": "5.1 Object browser"
  },
  {
    "objectID": "subsetting.html#object-structure",
    "href": "subsetting.html#object-structure",
    "title": "5  Subsetting",
    "section": "5.1 Object Structure",
    "text": "5.1 Object Structure\n\n5.1.1 Structure of an atomic vector\nConsider a vector object, x = c(1, 2, 3) and another vector object y = 1:3. Let’s print them on the console\n\n# an object\nx = c(1, 2, 3)\nprint(x)\n\n[1] 1 2 3\n\ntypeof(x)\n\n[1] \"double\"\n\n# another object\ny = 1:3\nprint(y)\n\n[1] 1 2 3\n\ntypeof(y)\n\n[1] \"integer\"\n\n# character vector\nz = c('Male', 'Female')\nprint(z)\n\n[1] \"Male\"   \"Female\"\n\ntypeof(z)\n\n[1] \"character\"\n\n\n\nstr(x)\n\n num [1:3] 1 2 3\n\nstr(y)\n\n int [1:3] 1 2 3\n\nstr(z)\n\n chr [1:2] \"Male\" \"Female\"\n\n\nAtomic vectors do not have attributes. attributes(x) will return NULL.\n\nattributes(x) # returns NULL\n\nNULL\n\n\n\n\n5.1.2 Structure of a matrix\nA matrix object has attributes.\n\nmy_mat = matrix(1:10, nrow = 2, ncol = 5)\n\nType of the my_mat object is integer because we’ve used a sequence (1:9) as its values. We will discuss more about sequence later in this book. For now, it is sufficient just to notice the data type, which is integer.\n\ntypeof(my_mat)\n\n[1] \"integer\"\n\n\nAnd the structure is\n\nstr(my_mat)\n\n int [1:2, 1:5] 1 2 3 4 5 6 7 8 9 10\n\n\nHow about the attributes of my_mat?\n\nattributes(my_mat)\n\n$dim\n[1] 2 5\n\n\nA matrix object has a dim attribute which represents its dimension. We rearranged an atomic vector 1:10 into a matrix object with 2 rows and 5 columns. ‘Dimension’ is the attribute of a matrix object, and it is represented by dim.\n\n\n5.1.3 Structure of a list\n\n\n5.1.4 Structure of a data.frame"
  },
  {
    "objectID": "subsetting.html#structure-and-attributes-of-objects",
    "href": "subsetting.html#structure-and-attributes-of-objects",
    "title": "5  Subsetting",
    "section": "5.1 Structure and Attributes of Objects",
    "text": "5.1 Structure and Attributes of Objects\nYou can use str() function to view the structure of an object. Attributes cab ne viewed using the attributes() function.\n\n\n\n\n\n\nStructure vs Attributes\n\n\n\nTo understand their differences, think of structure being the skeleton (e.g., components of a car) whereas attributes are the behaviors or abstract concepts or constructs (e.g., comfort level of the seats, how it handles curves).\n\n\n\n5.1.1 Structure of an atomic vector\nConsider a vector object, x = c(1, 2, 3) and another vector object y = 1:3. Let’s print them on the console\n\n# an object\nx = c(1, 2, 3)\nprint(x)\n\n[1] 1 2 3\n\ntypeof(x)\n\n[1] \"double\"\n\n# another object\ny = 1:3\nprint(y)\n\n[1] 1 2 3\n\ntypeof(y)\n\n[1] \"integer\"\n\n# character vector\nz = c('Male', 'Female')\nprint(z)\n\n[1] \"Male\"   \"Female\"\n\ntypeof(z)\n\n[1] \"character\"\n\n\n\nstr(x)\n\n num [1:3] 1 2 3\n\nstr(y)\n\n int [1:3] 1 2 3\n\nstr(z)\n\n chr [1:2] \"Male\" \"Female\"\n\n\nAtomic vectors do not have attributes. attributes(x) will return NULL.\n\nattributes(x) # returns NULL\n\nNULL\n\n\n\n\n5.1.2 Structure of a matrix\nA matrix object has attributes. Let us create a matrix my_mat with the sequence of numbers from 1 to 10 arranged by two rows and 5 columns.\n\nmy_mat = matrix(1:10, nrow = 2, ncol = 5)\n\nType of the my_mat object is integer because we’ve used a sequence (1:9) as its values. We will discuss more about sequence later in this book. For now, it is sufficient just to notice the data type, which is integer.\n\ntypeof(my_mat)\n\n[1] \"integer\"\n\n\nAnd the structure is\n\nstr(my_mat)\n\n int [1:2, 1:5] 1 2 3 4 5 6 7 8 9 10\n\n\nHow about the attributes of my_mat?\n\nattributes(my_mat)\n\n$dim\n[1] 2 5\n\n\nA matrix object has a dim attribute which represents its dimension. We rearranged an atomic vector 1:10 into a matrix object with 2 rows and 5 columns. ‘Dimension’ is the attribute of a matrix object, and it is represented by dim.\n\n\n5.1.3 Structure of a list\n\nmy_list = list(\n  serial = 1:5,\n  age = c(10, 11, 20, 30, 32), \n  sex = c('M', 'F', 'F', 'M', 'M')\n)\n\nstr(my_list)\n\nList of 3\n $ serial: int [1:5] 1 2 3 4 5\n $ age   : num [1:5] 10 11 20 30 32\n $ sex   : chr [1:5] \"M\" \"F\" \"F\" \"M\" ...\n\n\nAnd the attributes\n\nattributes(my_list)\n\n$names\n[1] \"serial\" \"age\"    \"sex\"   \n\n\n\nnames(my_list)\n\n[1] \"serial\" \"age\"    \"sex\"   \n\n\n\ndim(my_list)\n\nNULL\n\n\n\n\n5.1.4 Structure of a data.frame\n\nmy_list = list(\n  serial = 1:5,\n  age = c(10, 11, 20, 30, 32), \n  sex = c('M', 'F', 'F', 'M', 'M')\n)\n\ndf = data.frame(my_list)\n\nstr(df)\n\n'data.frame':   5 obs. of  3 variables:\n $ serial: int  1 2 3 4 5\n $ age   : num  10 11 20 30 32\n $ sex   : chr  \"M\" \"F\" \"F\" \"M\" ...\n\n\nAttributes\n\nattributes(df)\n\n$names\n[1] \"serial\" \"age\"    \"sex\"   \n\n$class\n[1] \"data.frame\"\n\n$row.names\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "datatypes.html#factor",
    "href": "datatypes.html#factor",
    "title": "3  Data Types",
    "section": "3.4 Factor",
    "text": "3.4 Factor\nFactor data type is built on top of integer. Factors are also known as ‘category’ and ‘enumerated’ types. As demonstrated previously, they all belong to vector type.\n\ncity = c('Dhaka', 'Rajshahi', 'Chottogram', \n         'Kumilla', 'Sylhet')\nprint(city)\n\n[1] \"Dhaka\"      \"Rajshahi\"   \"Chottogram\" \"Kumilla\"    \"Sylhet\"    \n\ntypeof(city)\n\n[1] \"character\"\n\n\nThe city object is of character type. You can create a factor out of the character vector by wrapping it with the function factor() function.\n\ncity_factor = factor(city)\n\nYou can verify that the type of city_factor is integer\n\ntypeof(city_factor)\n\n[1] \"integer\"\n\n\n\n\n\n\n\n\nTip\n\n\n\nFactor can only contain predefined values. The values are often called levels. You can set levels even the data do not have the value.\n\n\nYou can assign levels to a factor variable\n\n# social status as a character vector\nstatus_char = c('High', 'Medium')\n\n# social status as a factor vector\nstatus_factor = factor(\n  status_char, \n  levels = c('High', 'Medium', 'Low')\n)\n\n# print the values\nprint(status_factor)\n\n[1] High   Medium\nLevels: High Medium Low\n\n\nRunning table() function displays the frequency of each element of the vector with number of times they occur.\n\ntable(status_char)\n\nstatus_char\n  High Medium \n     1      1 \n\n\nDo the same on the factor object, we see a slightly different result. This is because the level of the factor was explicitly assigned (predefined).\n\ntable(status_factor)\n\nstatus_factor\n  High Medium    Low \n     1      1      0 \n\n\nHow about if you assign different levels that do not exist in the data?\n\nstatus_factor_extra = factor(\n  status_char, \n  levels = c('High Status', 'Medium Status', 'Low Status')\n)\n\ntable(status_factor_extra)\n\nstatus_factor_extra\n  High Status Medium Status    Low Status \n            0             0             0 \n\n\nIf you print the status_factor_extra object, you see that the data are all NA because the predetermined levels do not match with the values of the vector.\n\nstatus_factor_extra\n\n[1] <NA> <NA>\nLevels: High Status Medium Status Low Status\n\n\n\n3.4.1 Ordered factor\nFactors can be ordered depending on the value it holds. For example, social class is an ordinal measure. It can be ‘high’, ‘medium’, ‘low’.\nTo created an ordered factor use the ordered() function\n\nsocial_class = c('Medium', 'Low', 'Low', 'High')\nsocial_class_factor = ordered(\n  social_class,\n  levels = c('Low', 'Medium', 'High')\n)\n\nsocial_class_factor\n\n[1] Medium Low    Low    High  \nLevels: Low < Medium < High\n\n\n\ntable(social_class_factor)\n\nsocial_class_factor\n   Low Medium   High \n     2      1      1 \n\n\nOrdering of factor levels is useful and often more meaningful than unordered levels. Many statistical functions will utilize this ordering in statistical modeling and visualizations."
  },
  {
    "objectID": "datatypes.html#assining-levels-to-a-factor",
    "href": "datatypes.html#assining-levels-to-a-factor",
    "title": "3  Data Types",
    "section": "3.5 Assining levels to a factor",
    "text": "3.5 Assining levels to a factor\nYou can assign levels to a factor variable\n\ncity_factor2 = factor(city, levels = c('Dhk', 'Raj', 'Cht', 'Kum', 'Syl'))\nprint(city_factor2)\n\n[1] <NA> <NA> <NA> <NA> <NA>\nLevels: Dhk Raj Cht Kum Syl"
  },
  {
    "objectID": "part1.html",
    "href": "part1.html",
    "title": "Part I: R",
    "section": "",
    "text": "In this section we gently introduce R and how to work with it"
  },
  {
    "objectID": "str-attr.html",
    "href": "str-attr.html",
    "title": "5  Structure and Attributes",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "str-attr.html#structure-and-attributes-of-objects",
    "href": "str-attr.html#structure-and-attributes-of-objects",
    "title": "5  Structure and Attributes",
    "section": "5.1 Structure and Attributes of Objects",
    "text": "5.1 Structure and Attributes of Objects\nYou can use str() function to view the structure of an object. Attributes cab ne viewed using the attributes() function.\n\n\n\n\n\n\nStructure vs Attributes\n\n\n\nTo understand their differences, think of structure being the skeleton (e.g., components of a car) whereas attributes are the behaviors or abstract concepts or constructs (e.g., comfort level of the seats, how it handles curves).\n\n\n\n5.1.1 Structure of an atomic vector\nConsider a vector object, x = c(1, 2, 3) and another vector object y = 1:3. Let’s print them on the console\n\n# an object\nx = c(1, 2, 3)\nprint(x)\n\n[1] 1 2 3\n\ntypeof(x)\n\n[1] \"double\"\n\n# another object\ny = 1:3\nprint(y)\n\n[1] 1 2 3\n\ntypeof(y)\n\n[1] \"integer\"\n\n# character vector\nz = c('Male', 'Female')\nprint(z)\n\n[1] \"Male\"   \"Female\"\n\ntypeof(z)\n\n[1] \"character\"\n\n\n\nstr(x)\n\n num [1:3] 1 2 3\n\nstr(y)\n\n int [1:3] 1 2 3\n\nstr(z)\n\n chr [1:2] \"Male\" \"Female\"\n\n\nAtomic vectors do not have attributes. attributes(x) will return NULL.\n\nattributes(x) # returns NULL\n\nNULL\n\n\n\n\n5.1.2 Structure of a matrix\nA matrix object has attributes. Let us create a matrix my_mat with the sequence of numbers from 1 to 10 arranged by two rows and 5 columns.\n\nmy_mat = matrix(1:10, nrow = 2, ncol = 5)\n\nType of the my_mat object is integer because we’ve used a sequence (1:9) as its values. We will discuss more about sequence later in this book. For now, it is sufficient just to notice the data type, which is integer.\n\ntypeof(my_mat)\n\n[1] \"integer\"\n\n\nAnd the structure is\n\nstr(my_mat)\n\n int [1:2, 1:5] 1 2 3 4 5 6 7 8 9 10\n\n\nHow about the attributes of my_mat?\n\nattributes(my_mat)\n\n$dim\n[1] 2 5\n\n\nA matrix object has a dim attribute which represents its dimension. We rearranged an atomic vector 1:10 into a matrix object with 2 rows and 5 columns. ‘Dimension’ is the attribute of a matrix object, and it is represented by dim.\n\n\n5.1.3 Structure of a list\n\nmy_list = list(\n  serial = 1:5,\n  age = c(10, 11, 20, 30, 32), \n  sex = c('M', 'F', 'F', 'M', 'M')\n)\n\nstr(my_list)\n\nList of 3\n $ serial: int [1:5] 1 2 3 4 5\n $ age   : num [1:5] 10 11 20 30 32\n $ sex   : chr [1:5] \"M\" \"F\" \"F\" \"M\" ...\n\n\nAnd the attributes\n\nattributes(my_list)\n\n$names\n[1] \"serial\" \"age\"    \"sex\"   \n\n\n\nnames(my_list)\n\n[1] \"serial\" \"age\"    \"sex\"   \n\n\n\ndim(my_list)\n\nNULL\n\n\n\n\n5.1.4 Structure of a data.frame\n\nmy_list = list(\n  serial = 1:5,\n  age = c(10, 11, 20, 30, 32), \n  sex = c('M', 'F', 'F', 'M', 'M')\n)\n\ndf = data.frame(my_list)\n\nstr(df)\n\n'data.frame':   5 obs. of  3 variables:\n $ serial: int  1 2 3 4 5\n $ age   : num  10 11 20 30 32\n $ sex   : chr  \"M\" \"F\" \"F\" \"M\" ...\n\n\nAttributes\n\nattributes(df)\n\n$names\n[1] \"serial\" \"age\"    \"sex\"   \n\n$class\n[1] \"data.frame\"\n\n$row.names\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "str-attr.html#subsetting-atomic-vector",
    "href": "str-attr.html#subsetting-atomic-vector",
    "title": "5  Structure and Attributes",
    "section": "5.2 Subsetting atomic vector",
    "text": "5.2 Subsetting atomic vector"
  },
  {
    "objectID": "str-attr.html#subsetting-matrix",
    "href": "str-attr.html#subsetting-matrix",
    "title": "5  Structure and Attributes",
    "section": "5.3 Subsetting Matrix",
    "text": "5.3 Subsetting Matrix"
  },
  {
    "objectID": "str-attr.html#subsetting-data-frame",
    "href": "str-attr.html#subsetting-data-frame",
    "title": "5  Structure and Attributes",
    "section": "5.4 Subsetting Data Frame",
    "text": "5.4 Subsetting Data Frame\nData frames are created using the data.frame() function by supplying a list of columns. data.frames, as it is typically referred to are of list data type with one important distinction. List can have elements of unequal length. In data.frame, all the elements must have the same length to make the data.frame a true rectangular array.\n\nx = c(1, 2, 3)\nmy_list = list(\n  serial = 1:5,\n  age = c(10, 11, 20, 30, 32), \n  sex = c('M', 'F', 'F', 'M', 'M')\n)\ndf = data.frame(my_list)\n\ndf\n\n  serial age sex\n1      1  10   M\n2      2  11   F\n3      3  20   F\n4      4  30   M\n5      5  32   M\n\n\nIf you look at the data type for df using typeof(df), you will see its a list.\n\ntypeof(df)\n\n[1] \"list\"\n\n\nTo view the structure of df object\n\nstr(df)\n\n'data.frame':   5 obs. of  3 variables:\n $ serial: int  1 2 3 4 5\n $ age   : num  10 11 20 30 32\n $ sex   : chr  \"M\" \"F\" \"F\" \"M\" ..."
  },
  {
    "objectID": "str-attr.html#attributes-of-data-frame",
    "href": "str-attr.html#attributes-of-data-frame",
    "title": "5  Structure and Attributes",
    "section": "5.6 Attributes of Data Frame",
    "text": "5.6 Attributes of Data Frame\nAs mentioned earlier, matrix and data frame are collection of vectors but they have additional characteristics called ‘attributes’. R’s data frame is a named list of vectors with the following attributes:\n\ncolumn names (names)\nrow names (row.names)\nclass (class)\n\nLets see the attributes of the df data frame object.\n\nattributes(df)\n\n$names\n[1] \"serial\" \"age\"    \"sex\"   \n\n$class\n[1] \"data.frame\"\n\n$row.names\n[1] 1 2 3 4 5\n\n\nBecause they are attributes of an object, these functions can be used to extract these attributes from these objects. Thus, to know the column names sumply use the names() function as follows.\n\nnames(df)\n\n[1] \"serial\" \"age\"    \"sex\"   \n\n\nLikewise, to get the row names, use row.names(df) and to get the class of the object, use class(df)\n\nrow.names(df)\n\n[1] \"1\" \"2\" \"3\" \"4\" \"5\"\n\nclass(df)\n\n[1] \"data.frame\""
  },
  {
    "objectID": "str-attr.html#structure-of-data-frame",
    "href": "str-attr.html#structure-of-data-frame",
    "title": "5  Structure and Attributes",
    "section": "5.5 Structure of Data Frame",
    "text": "5.5 Structure of Data Frame\nData frames are created using the data.frame() function by supplying a list of columns. data.frames, as it is typically referred to are of list data type with one important distinction. List can have elements of unequal length. In data.frame, all the elements must have the same length to make the data.frame a true rectangular array.\n\nx = c(1, 2, 3)\nmy_list = list(\n  serial = 1:5,\n  age = c(10, 11, 20, 30, 32), \n  sex = c('M', 'F', 'F', 'M', 'M')\n)\ndf = data.frame(my_list)\n\ndf\n\n  serial age sex\n1      1  10   M\n2      2  11   F\n3      3  20   F\n4      4  30   M\n5      5  32   M\n\n\nIf you look at the data type for df using typeof(df), you will see its a list.\n\ntypeof(df)\n\n[1] \"list\"\n\n\nTo view the structure of df object\n\nstr(df)\n\n'data.frame':   5 obs. of  3 variables:\n $ serial: int  1 2 3 4 5\n $ age   : num  10 11 20 30 32\n $ sex   : chr  \"M\" \"F\" \"F\" \"M\" ..."
  },
  {
    "objectID": "str-attr.html#exercise",
    "href": "str-attr.html#exercise",
    "title": "5  Structure and Attributes",
    "section": "5.7 Exercise",
    "text": "5.7 Exercise\n\nCreate a matrix object and explore its attributes. What difference do you see from the attribtues of a data frame?\n\n\nx = matrix(1:10, ncol=2)\nx\nattributes(x)\n\n\nCreate a list object and explore its attributes.\nCreate a data frame object and explore its attributes."
  },
  {
    "objectID": "str-attr.html#structure-of-an-atomic-vector",
    "href": "str-attr.html#structure-of-an-atomic-vector",
    "title": "5  Structure and Attributes",
    "section": "5.1 Structure of an atomic vector",
    "text": "5.1 Structure of an atomic vector\nConsider a vector object, x = c(1, 2, 3) and another vector object y = 1:3. Let’s print them on the console\n\n# an object\nx = c(1, 2, 3)\nprint(x)\n\n[1] 1 2 3\n\ntypeof(x)\n\n[1] \"double\"\n\n# another object\ny = 1:3\nprint(y)\n\n[1] 1 2 3\n\ntypeof(y)\n\n[1] \"integer\"\n\n# character vector\nz = c('Male', 'Female')\nprint(z)\n\n[1] \"Male\"   \"Female\"\n\ntypeof(z)\n\n[1] \"character\"\n\n\n\nstr(x)\n\n num [1:3] 1 2 3\n\nstr(y)\n\n int [1:3] 1 2 3\n\nstr(z)\n\n chr [1:2] \"Male\" \"Female\"\n\n\nAtomic vectors do not have attributes. attributes(x) will return NULL.\n\nattributes(x) # returns NULL\n\nNULL"
  },
  {
    "objectID": "str-attr.html#structure-of-a-matrix",
    "href": "str-attr.html#structure-of-a-matrix",
    "title": "5  Structure and Attributes",
    "section": "5.2 Structure of a Matrix",
    "text": "5.2 Structure of a Matrix\nA matrix object has attributes. Let us create a matrix my_mat with the sequence of numbers from 1 to 10 arranged by two rows and 5 columns.\n\nmy_mat = matrix(1:10, nrow = 2, ncol = 5)\n\nType of the my_mat object is integer because we’ve used a sequence (1:9) as its values. We will discuss more about sequence later in this book. For now, it is sufficient just to notice the data type, which is integer.\n\ntypeof(my_mat)\n\n[1] \"integer\"\n\n\nAnd the structure is\n\nstr(my_mat)\n\n int [1:2, 1:5] 1 2 3 4 5 6 7 8 9 10\n\n\nHow about the attributes of my_mat?\n\nattributes(my_mat)\n\n$dim\n[1] 2 5\n\n\nA matrix object has a dim attribute which represents its dimension. We rearranged an atomic vector 1:10 into a matrix object with 2 rows and 5 columns. ‘Dimension’ is the attribute of a matrix object, and it is represented by dim."
  },
  {
    "objectID": "str-attr.html#structure-of-a-list",
    "href": "str-attr.html#structure-of-a-list",
    "title": "5  Structure and Attributes",
    "section": "5.3 Structure of a List",
    "text": "5.3 Structure of a List\n\nmy_list = list(\n  serial = 1:5,\n  age = c(10, 11, 20, 30, 32), \n  sex = c('M', 'F', 'F', 'M', 'M')\n)\n\nstr(my_list)\n\nList of 3\n $ serial: int [1:5] 1 2 3 4 5\n $ age   : num [1:5] 10 11 20 30 32\n $ sex   : chr [1:5] \"M\" \"F\" \"F\" \"M\" ...\n\n\nAnd the attributes\n\nattributes(my_list)\n\n$names\n[1] \"serial\" \"age\"    \"sex\"   \n\n\n\nnames(my_list)\n\n[1] \"serial\" \"age\"    \"sex\"   \n\n\n\ndim(my_list)\n\nNULL"
  },
  {
    "objectID": "str-attr.html#structure-of-a-data.frame",
    "href": "str-attr.html#structure-of-a-data.frame",
    "title": "5  Structure and Attributes",
    "section": "5.4 Structure of a data.frame",
    "text": "5.4 Structure of a data.frame\n\nmy_list = list(\n  serial = 1:5,\n  age = c(10, 11, 20, 30, 32), \n  sex = c('M', 'F', 'F', 'M', 'M')\n)\n\ndf = data.frame(my_list)\n\nstr(df)\n\n'data.frame':   5 obs. of  3 variables:\n $ serial: int  1 2 3 4 5\n $ age   : num  10 11 20 30 32\n $ sex   : chr  \"M\" \"F\" \"F\" \"M\" ...\n\n\nAttributes\n\nattributes(df)\n\n$names\n[1] \"serial\" \"age\"    \"sex\"   \n\n$class\n[1] \"data.frame\"\n\n$row.names\n[1] 1 2 3 4 5"
  },
  {
    "objectID": "subsetting.html#subsetting-list",
    "href": "subsetting.html#subsetting-list",
    "title": "6  Subsetting",
    "section": "6.3 Subsetting List",
    "text": "6.3 Subsetting List\n\n# Create the list\n\nmy_list = list(\n  serial = 1:5,\n  age = c(10, 11, 20, 30, 32),\n  sex = c('M', 'F', 'F', 'M', 'm')\n)\n\n# prints the list\nmy_list\n\n$serial\n[1] 1 2 3 4 5\n\n$age\n[1] 10 11 20 30 32\n\n$sex\n[1] \"M\" \"F\" \"F\" \"M\" \"m\"\n\n\nList can be subsetted using the $ operator too.\n\nmy_list$age\n\n[1] 10 11 20 30 32\n\n\nOr alternatively [ or the [[ operator can be used depending on your preference and exactly what you want to extract.\n\n# extracts the first item of the list\nmy_list[1]\n\n$serial\n[1] 1 2 3 4 5\n\n# extracts the elements of the first item of the list\nmy_list[[1]]\n\n[1] 1 2 3 4 5\n\n\nYou can also use the name of the vector within the list to extract the list item\n\nmy_list['age']\n\n$age\n[1] 10 11 20 30 32\n\n\nTo extract the second element of the named vector age\n\nmy_list[['age']][2]\n\n[1] 11\n\n\nYou can also use the [[ operator on data frame to extract the items and the elements within the items of a data frame. This is because the data frame is a collection of atomic vectors and its data type is list.\n\ntypeof(df)\n\n[1] \"closure\""
  },
  {
    "objectID": "subsetting.html#assigning-values-with-subsetting",
    "href": "subsetting.html#assigning-values-with-subsetting",
    "title": "6  Subsetting",
    "section": "6.5 Assigning values with Subsetting",
    "text": "6.5 Assigning values with Subsetting\nSubsetting can be used to assign new values. This is also known as ‘setting’ a value\n\n6.5.1 Atomic Vector\n\nmy_vec2 = my_vec\n\n# replace the value in the second position\n\nmy_vec2[2] = 20.2\n\nmy_vec\n\n[1] 10.1  2.2 32.3  5.4\n\nmy_vec2\n\n[1] 10.1 20.2 32.3  5.4\n\n\n\n\n6.5.2 Matrix\n\nmy_mat2 = my_mat\n\nmy_mat2[1, 1] = 10\nmy_mat2\n\n      [,1] [,2] [,3] [,4] [,5]\n [1,]   10   11   21   31   41\n [2,]    2   12   22   32   42\n [3,]    3   13   23   33   43\n [4,]    4   14   24   34   44\n [5,]    5   15   25   35   45\n [6,]    6   16   26   36   46\n [7,]    7   17   27   37   47\n [8,]    8   18   28   38   48\n [9,]    9   19   29   39   49\n[10,]   10   20   30   40   50\n\n\n\n\n6.5.3 List\n\nmy_list2 = my_list\n\nnew_age = my_list$age + 10\nmy_list2$age = new_age\n\nmy_list\n\n$serial\n[1] 1 2 3 4 5\n\n$age\n[1] 10 11 20 30 32\n\n$sex\n[1] \"M\" \"F\" \"F\" \"M\" \"M\"\n\nmy_list2\n\n$serial\n[1] 1 2 3 4 5\n\n$age\n[1] 20 21 30 40 42\n\n$sex\n[1] \"M\" \"F\" \"F\" \"M\" \"M\"\n\n\nAdding a new element to the list object\n\nmy_list$new_age = my_list$age + 20\n\nmy_list\n\n$serial\n[1] 1 2 3 4 5\n\n$age\n[1] 10 11 20 30 32\n\n$sex\n[1] \"M\" \"F\" \"F\" \"M\" \"M\"\n\n$new_age\n[1] 30 31 40 50 52\n\n\n\n\n6.5.4 Data frames\nSince data frames are lists, the same rule applies for subsetting and assigning new values and elements to the list (equivalently adding new columns to the data frame)\n\n\n6.5.5 Exercise\n\nCreate a matrix object and explore its attributes. What difference do you see from the attributes of a data frame?\n\n\nx = matrix(1:10, ncol=2)\nx\nattributes(x)\n\n\nCreate a list object and explore its attributes.\nCreate a data frame object and explore its attributes."
  },
  {
    "objectID": "operators.html",
    "href": "operators.html",
    "title": "7  Operators in R",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "operators.html#subsetting-atomic-vector",
    "href": "operators.html#subsetting-atomic-vector",
    "title": "7  Subsetting",
    "section": "7.1 Subsetting Atomic Vector",
    "text": "7.1 Subsetting Atomic Vector\n\n7.1.1 Using integer position\nThere are six ways to subset an atomic vector. However, we will focus on two that you can reuse for other data types.\nFirst, there are three subsetting operators. These are [, [[, and $. Let’s see an example.\n\nmy_vec = c(10.1, 2.2, 32.3, 5.4)\n\nThe number after the decimals indicate the actual position of the elements. If we want to select the first element of the vector, we use the vector name and within the bracket, put the position of the element. my_vec[1] will give your the first element of my_vec.\n\nmy_vec[1]\n\n[1] 10.1\n\n\nNotice that we used 1 to identify the first element. In R, the index starts at 1. In many popular programming languages such as Python and Java, the index starts at zero. Just keep this in mind.\nTo extract the second element, use [2]\n\nmy_vec[2]\n\n[1] 2.2\n\n\nHow about extracting multiple elements? Not a problem. Just combine the element’s positions with the c() function and wrap that with the subsetting operator [ on the my_vec object\n\n# extract the first and third element\nmy_vec[c(1, 3)] # subsetting with integer position\n\n[1] 10.1 32.3\n\n\nTo exclude an element at a particular position, negate the function as -c()\n\n# exclude the second element\nmy_vec[-c(2)]\n\n[1] 10.1 32.3  5.4\n\n\nHowever, we cannot include and exclude at the same time.\n\n# keep first element but exclude the second\nmy_vec[c(1, -2)] # only 0's may be mixed with negative subscripts\n\n\n\n7.1.2 Using logical vectors\nWe want to select all the elements that are bigger than 9. First we create a logical vector that satisfies our conditions\n\nmy_vec > 9\n\n[1]  TRUE FALSE  TRUE FALSE\n\n# check the type of the resulting vector\ntypeof(my_vec > 9)\n\n[1] \"logical\"\n\n\nNow apply the resulting logical vector to subsetting from my_vec to return only the elements where the condition (greater than 9) is TRUE\n\nmy_vec[my_vec > 9] # subsetting with logical vector\n\n[1] 10.1 32.3\n\n\n\n\n\n\n\n\nUse logical vector instead of for loop\n\n\n\nUsing logical vector to subsetting is extremely fast. In R, try to avoid for loops. Instead, use logical vector for vectorized computation."
  },
  {
    "objectID": "operators.html#subsetting-matrix",
    "href": "operators.html#subsetting-matrix",
    "title": "7  Subsetting",
    "section": "7.2 Subsetting Matrix",
    "text": "7.2 Subsetting Matrix\nSince matrix is a two-dimensional object which has a row and a column, the subsetting must utilize its dimensions.\nLet us create a matrix my_mat whose elements 1:50 are arranged in 10 rows and 5 columns.\n\nmy_mat = matrix(1:50, nrow = 10, ncol = 5)\nmy_mat\n\n      [,1] [,2] [,3] [,4] [,5]\n [1,]    1   11   21   31   41\n [2,]    2   12   22   32   42\n [3,]    3   13   23   33   43\n [4,]    4   14   24   34   44\n [5,]    5   15   25   35   45\n [6,]    6   16   26   36   46\n [7,]    7   17   27   37   47\n [8,]    8   18   28   38   48\n [9,]    9   19   29   39   49\n[10,]   10   20   30   40   50\n\n\nFirst element is 1 which is located at the first-row and first-column. That is, the location of the first element is [1, 1], where the first element represents the row-position, and the second element represents the column-position.\n\n# extract the first element\nmy_mat[1,1]\n\n[1] 1\n\n\n\n7.2.1 Subsetting entire row of a matrix\n\n# subset the first row\nmy_mat[1, ]\n\n[1]  1 11 21 31 41\n\n\n\n\n7.2.2 Subsetting multiple rows of a matrix\n\n# subset rows 1, 2, and 4 and return all columns\nmy_mat[c(1, 2, 4), ]\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1   11   21   31   41\n[2,]    2   12   22   32   42\n[3,]    4   14   24   34   44\n\n\n\n\n7.2.3 Subsetting a column\n\n# subset the second columns and keep values in all rows\nmy_mat[ , 2]\n\n [1] 11 12 13 14 15 16 17 18 19 20"
  },
  {
    "objectID": "operators.html#subsetting-data-frame",
    "href": "operators.html#subsetting-data-frame",
    "title": "7  Subsetting",
    "section": "7.3 Subsetting Data Frame",
    "text": "7.3 Subsetting Data Frame\nData frames are created using the data.frame() function by supplying a list of columns. data.frames, as it is typically referred to are of list data type with one important distinction. List can have elements of unequal length. In data.frame, all the elements must have the same length to make the data.frame a true rectangular array.\n\nx = c(1, 2, 3)\nmy_list = list(\n  serial = 1:5,\n  age = c(10, 11, 20, 30, 32), \n  sex = c('M', 'F', 'F', 'M', 'M')\n)\ndf = data.frame(my_list)\n\ndf\n\n  serial age sex\n1      1  10   M\n2      2  11   F\n3      3  20   F\n4      4  30   M\n5      5  32   M\n\n\nIf you look at the data type for df using typeof(df), you will see its a list.\n\ntypeof(df)\n\n[1] \"list\"\n\n\nTo view the structure of df object\n\nstr(df)\n\n'data.frame':   5 obs. of  3 variables:\n $ serial: int  1 2 3 4 5\n $ age   : num  10 11 20 30 32\n $ sex   : chr  \"M\" \"F\" \"F\" \"M\" ...\n\n\nTo select the columns, we use $ operator to subset a column\n\ndf$age\n\n[1] 10 11 20 30 32\n\ndf$serial\n\n[1] 1 2 3 4 5\n\ndf$sex\n\n[1] \"M\" \"F\" \"F\" \"M\" \"M\"\n\n\nThe data type of the extracted column age is double. Likewise, the data type of sex is character.\n\n7.3.1 Selecting rows using conditions\nSelect all rows where the sex is male\n\ndf$sex\n\n[1] \"M\" \"F\" \"F\" \"M\" \"M\"\n\ndf$sex == 'M'\n\n[1]  TRUE FALSE FALSE  TRUE  TRUE\n\n# subset the males\ndf[df$sex == 'M', ]\n\n  serial age sex\n1      1  10   M\n4      4  30   M\n5      5  32   M\n\n\nIf you want to select only age and sex of the data frame where sex = M\n\ndf[df$sex == 'M', c('age', 'sex')]\n\n  age sex\n1  10   M\n4  30   M\n5  32   M\n\n\nAlternatively we could use the column position integers to select the columns\n\ndf[df$sex == 'M', c(2, 3)]\n\n  age sex\n1  10   M\n4  30   M\n5  32   M"
  },
  {
    "objectID": "operators.html#subsetting-list",
    "href": "operators.html#subsetting-list",
    "title": "7  Subsetting",
    "section": "7.4 Subsetting List",
    "text": "7.4 Subsetting List\n\n# prints the list\nmy_list\n\n$serial\n[1] 1 2 3 4 5\n\n$age\n[1] 10 11 20 30 32\n\n$sex\n[1] \"M\" \"F\" \"F\" \"M\" \"M\"\n\n\nList can be subsetted using the $ operator too.\n\nmy_list$age\n\n[1] 10 11 20 30 32\n\n\nOr alternatively [ or the [[ operator can be used depending on your preference and exactly what you want to extract.\n\n# extracts the first item of the list\nmy_list[1]\n\n$serial\n[1] 1 2 3 4 5\n\n# extracts the elements of the first item of the list\nmy_list[[1]]\n\n[1] 1 2 3 4 5\n\n\nYou can also use the name of the vector within the list to extract the list item\n\nmy_list['age']\n\n$age\n[1] 10 11 20 30 32\n\n\nTo extract the second element of the named vector age\n\nmy_list[['age']][2]\n\n[1] 11\n\n\nYou can also use the [[ operator on data frame to extract the items and the elements within the items of a data frame. This is because the data frame is a collection of atomic vectors and its data type is list.\n\ntypeof(df)\n\n[1] \"list\""
  },
  {
    "objectID": "operators.html#assigning-values-with-subsetting",
    "href": "operators.html#assigning-values-with-subsetting",
    "title": "7  Subsetting",
    "section": "7.5 Assigning values with Subsetting",
    "text": "7.5 Assigning values with Subsetting\nSubsetting can be used to assign new values. This is also known as ‘setting’ a value\n\n7.5.1 Exercise\n\nCreate a matrix object and explore its attributes. What difference do you see from the attributes of a data frame?\n\n\nx = matrix(1:10, ncol=2)\nx\nattributes(x)\n\n\nCreate a list object and explore its attributes.\nCreate a data frame object and explore its attributes."
  },
  {
    "objectID": "operators.html#arithmetic-operators",
    "href": "operators.html#arithmetic-operators",
    "title": "7  Operators in R",
    "section": "7.2 Arithmetic Operators",
    "text": "7.2 Arithmetic Operators\nThese are the operators for performing computation with numerical data type\n\nArithmetic Operators in R\n\n\nOperator\nDescription\nSample Code\nOutput\n\n\n\n\n+\nAddition\n10 + 10\n20\n\n\n-\nSubtraction\n10 - 8\n2\n\n\n*\nMultiplication\n5 * 10\n50\n\n\n/\nDivision\n50 / 10\n5\n\n\n^\nExponent\n10 ^ 2\n100\n\n\n%/%\nInteger division\n20 %/% 3\n6\n\n\n%%\nModulus (remainder)\n10 %% 3\n1\n\n\n%*%\nMatrix multiplication\nsee below\nsee below\n\n\n\nLet us define the two matrices as follows\n\nmat_a = matrix(c(10, 20, 30, 40), nrow = 2)\nmat_b = matrix(c(1, 2, 3, 4), nrow = 2)\n\nmat_a\n\n     [,1] [,2]\n[1,]   10   30\n[2,]   20   40\n\nmat_b\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n# Element wise multiplication\nmat_a * mat_b\n\n     [,1] [,2]\n[1,]   10   90\n[2,]   40  160\n\n# True matrix multiplication\nmat_a %*% mat_b\n\n     [,1] [,2]\n[1,]   70  150\n[2,]  100  220"
  },
  {
    "objectID": "operators.html#relational-operators",
    "href": "operators.html#relational-operators",
    "title": "7  Operators in R",
    "section": "7.3 Relational Operators",
    "text": "7.3 Relational Operators\nRelational operators return boolean output.\n\nRelational Operators in R\n\n\nOperator\nDescription\nExample\nOutput\n\n\n\n\n>\nGreater than\n5 > 2\nTRUE\n\n\n<\nLess than\n5 < 2\nFALSE\n\n\n>=\nGreater than or equal to\n10 >= 10\nTRUE\n\n\n\n\nc(1, 10) >= c(-2, 20)\nTRUE, FALSE\n\n\n<=\nLess than or equal to\n100 <= 100\nTRUE\n\n\n\n\nc(1, 10) <= c(-2, 20)\nFALSE, TRUE\n\n\n==\nEqual to\n10 == 10\nTRUE\n\n\n\n\n'Male' == 'M'\nFALSE\n\n\n\n\n'Male' == ' Male'\nFALSE\n\n\n\n\n'Male' == 'male'\nFALSE\n\n\n!=\nNot equal to\n10 != 9\nTRUE\n\n\n\n\n'Male' != 'male'\nTRUE"
  },
  {
    "objectID": "operators.html#logical-operators",
    "href": "operators.html#logical-operators",
    "title": "7  Operators in R",
    "section": "7.4 Logical Operators",
    "text": "7.4 Logical Operators\nLogical operators also return boolean values TRUE or FALSE\n\nLogical Operators in R\n\n\nOperator\nDescription\nExample\nOutput\n\n\n\n\n!\nLogical NOT\n\n\n\n\n&\nElement-wise Logical AND\n\n\n\n\n|\nElement-wise Logical OR\n\n\n\n\n&&\nLogical AND\n\n\n\n\n||\nLogical OR\n\n\n\n\n\nFor the && and || operators, I will not discuss here. But if you are interested, read the documentation which reads.\n\nThe “short-circuit” operators && and || are often used as part of the condition in an if statement. Whereas & and | apply element-wise to vectors, && and || apply to vectors of length one, and only evaluate their second argument if necessary.\n\nThe full R official documentation can be accessed here."
  },
  {
    "objectID": "operators.html#assignment-operators",
    "href": "operators.html#assignment-operators",
    "title": "7  Operators in R",
    "section": "7.1 Assignment Operators",
    "text": "7.1 Assignment Operators\nSo far we have been using = notation to assgin values to an object. For example age = c(10, 11, 12) indicates we are storing the age of three individuals to an object age with the assignment sign =. R has another way to assign object to its values.\n\nAssignment Operators in R\n\n\nOperator\nDescription\nExample\n\n\n\n\n=\nAssign the value to the object on the left\nx = 10\n\n\n<-\nAssign the value to the object on the left\nx <- 10\n\n\n->\nAssign the value to the object on the right\n10 -> x\n\n\n\nWe mostly use the = or the <- operators to assign values to ab object. It is recommended to use <- operator to avoid any confusion in cases such as the following.\n\nx = 5\nx = x == 3 # checking if the value of x is 3\nx\n\n[1] FALSE\n\n\nMuch readable with <- operator\n\nx = 5\nx <- x == 3 # checking if the value of x is 3\nx\n\n[1] FALSE"
  },
  {
    "objectID": "operators.html#examples-of-logical-operators",
    "href": "operators.html#examples-of-logical-operators",
    "title": "7  Operators in R",
    "section": "7.5 Examples of logical operators",
    "text": "7.5 Examples of logical operators\nTo negate the condition, we prefix with the ! sign. != means not equal to. That is, we are negating the equality. Lets see some examples\n\nx = 3\nx == 3 # its TRUE\n\n[1] TRUE\n\n!(x == 3) # when negated, it should be false\n\n[1] FALSE\n\nx != 3 # equivalent to the previous one\n\n[1] FALSE"
  },
  {
    "objectID": "operators.html#element-wise-logical-and-example",
    "href": "operators.html#element-wise-logical-and-example",
    "title": "7  Operators in R",
    "section": "7.6 Element-wise Logical AND example",
    "text": "7.6 Element-wise Logical AND example"
  },
  {
    "objectID": "operators.html#logical-and",
    "href": "operators.html#logical-and",
    "title": "7  Operators in R",
    "section": "7.7 Logical AND",
    "text": "7.7 Logical AND\n\ndf = data.frame(\n    serial = 1:5,\n  age = c(10, 11, 20, 30, 32), \n  sex = c('M', 'F', 'F', 'M', 'M')\n)\n\ndf\n\n  serial age sex\n1      1  10   M\n2      2  11   F\n3      3  20   F\n4      4  30   M\n5      5  32   M\n\ndf$age == 10 & df$sex == 'M'\n\n[1]  TRUE FALSE FALSE FALSE FALSE"
  },
  {
    "objectID": "tidyverse.html",
    "href": "tidyverse.html",
    "title": "8  Tidy Data Analysis",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "tidyverse.html#data-wrangling",
    "href": "tidyverse.html#data-wrangling",
    "title": "8  Data analysis with tidyverse",
    "section": "8.1 Data Wrangling",
    "text": "8.1 Data Wrangling"
  },
  {
    "objectID": "tidyverse.html#data-transformation",
    "href": "tidyverse.html#data-transformation",
    "title": "8  Tidy Data Analysis",
    "section": "8.2 Data transformation",
    "text": "8.2 Data transformation\ndplyr verbs\n\ndplyr verbs for data wrangling\n\n\n\n\n\n\nVerb\nWhat it does\n\n\n\n\nfilter()\nsubsetting rows/observations in a data frame\n\n\nselect()\nselects subset of columns by their names\n\n\nmutate()\ncreates new columns/variables off of existing columns/variables\n\n\narrange()\nreorders rows by column/variable\n\n\nsummarize()\ncreates summary statistics\n\n\ngroup_by()\nsplits data by by group for processing/summarizing/manipulating"
  },
  {
    "objectID": "tidyverse.html#whats-in-tidyverse",
    "href": "tidyverse.html#whats-in-tidyverse",
    "title": "8  Tidy Data Analysis",
    "section": "8.1 What’s in tidyverse",
    "text": "8.1 What’s in tidyverse\ntidyverse is a collection of R packages for data science.  You can install tidyverse with\n\ninstall.packages(\"tidyverse\")\n\nor use the Rstudio visual interface.\nOnce installed, you can load it like any other R packages\n\nlibrary(tidyverse)\n\nThe list of packages in this collection along with that they do is summarized below\n\nList of Packages in tidyverse\n\n\n\n\n\n\nPackage\nWhat it does\n\n\n\n\ndplyr\nthe flagship package which provides grammar of data manipulation with a consistet set of verbs\n\n\nggplot2\nfor creating beautiful graphics based on Grammar of Graphics\n\n\ntidyr\nfor tyding your data set\n\n\nreadr\nreading rectangular data\n\n\nforcats\nfor working with factor data types\n\n\nstringr\nmakes working with strings/characters easier\n\n\ntibble\na modern data-frame evolved from the base data.frame\n\n\npurr\nenhances functional programming in R"
  },
  {
    "objectID": "tidyverse.html#data",
    "href": "tidyverse.html#data",
    "title": "8  Tidy Data Analysis",
    "section": "8.3 Data",
    "text": "8.3 Data\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.4\n✔ tibble  3.1.7     ✔ dplyr   1.0.9\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nmpg %>% glimpse()\n\nRows: 234\nColumns: 11\n$ manufacturer <chr> \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        <chr> \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        <dbl> 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         <int> 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          <int> 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        <chr> \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          <chr> \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          <int> 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          <int> 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           <chr> \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        <chr> \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\n\nNow, if you haven’t loaded tidyverse library on the console, or interactively on the Rmd file, then ? mpg will show an error > ?mpg No documentation for ‘mpg’ in specified packages and libraries: you could try ‘??mpg’\nThe error message suggests you to try ?? mpg instead. Note, the double question mark. This will search the entire R ecosystem currently available in your system including the libraries that are installed but not loaded.\nWhen running ?? mpg on the console, we get this\n\n\n\nSearch mpg in all installed libraries\n\n\nNow we see from the image above that the mpg is in the ggplot2 library. Please note how do I know that it is in the ggplot2 library. Becasue it is written as ggplot2::mpg this indicates that the mpg object is in the ggplot2 library.\nYou can call the mpg object if you either loaded tidyverse pckage or the ggplot2 packahge using either library(tidyverse) or library(ggolot2) on the notebook or on the console.\nIf you do not want to load the library, yet want to use the mpg data set, you have to call it by ggplot2::mpg. Likewise, if you run ?ggplot2::mpg, the data profile will be shown.\n\n?ggplot2::mpg\n\nWhen you execute the above, you will see under the Help tab, the details about the mpg data set. This is the same data set as the mtcars but with some enhancements."
  },
  {
    "objectID": "tidyverse.html#basic-usage-of-dplyr-verbs",
    "href": "tidyverse.html#basic-usage-of-dplyr-verbs",
    "title": "8  Tidy Data Analysis",
    "section": "8.4 Basic Usage of dplyr verbs",
    "text": "8.4 Basic Usage of dplyr verbs\nFirst, lets start with the mpg data set available in ggplot2 package.\n\nmpg %>% glimpse()\n\nRows: 234\nColumns: 11\n$ manufacturer <chr> \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        <chr> \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        <dbl> 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         <int> 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          <int> 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        <chr> \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          <chr> \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          <int> 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          <int> 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           <chr> \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        <chr> \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\n\nThere are 234 rows and 11 columns or variables in the data set. This also confirms with the output produced when running glimpse()."
  },
  {
    "objectID": "tidyverse.html#filter-rows-with-filter",
    "href": "tidyverse.html#filter-rows-with-filter",
    "title": "8  Tidy Data Analysis",
    "section": "8.5 Filter rows with filter()",
    "text": "8.5 Filter rows with filter()\n\n8.5.1 Filtering based on one condition\nLet us filter all the rows of the data where the vehicle is a front-wheel drive. The variable is drv for drivetrain. First, let us see a simple table showing the values in the data and their frequencies\n\ntable(mpg$drv)\n\n\n  4   f   r \n103 106  25 \n\n\nAlternatively, we can alternatively run\n\nmpg %>% \n  select(drv) %>% \n  table()\n\ndrv\n  4   f   r \n103 106  25 \n\n\nThere are three types of vehicles, four-wheel drive (represented by drv = 4), front-wheel drive (drv = f) and rear-wheel drive (drv = r).\nTo select only the front-wheel drive vehicles, we use filter() function with the condition that the drv == 'f'. Notice that the variable name drv doesn’t need to be wrapped with quotation, but the actual value of the variable must be put within quotation. Either single or double quotation would work.\n\nmpg %>% \n  filter(drv == 'f')\n\n# A tibble: 106 × 11\n   manufacturer model  displ  year   cyl trans     drv     cty   hwy fl    class\n   <chr>        <chr>  <dbl> <int> <int> <chr>     <chr> <int> <int> <chr> <chr>\n 1 audi         a4       1.8  1999     4 auto(l5)  f        18    29 p     comp…\n 2 audi         a4       1.8  1999     4 manual(m… f        21    29 p     comp…\n 3 audi         a4       2    2008     4 manual(m… f        20    31 p     comp…\n 4 audi         a4       2    2008     4 auto(av)  f        21    30 p     comp…\n 5 audi         a4       2.8  1999     6 auto(l5)  f        16    26 p     comp…\n 6 audi         a4       2.8  1999     6 manual(m… f        18    26 p     comp…\n 7 audi         a4       3.1  2008     6 auto(av)  f        18    27 p     comp…\n 8 chevrolet    malibu   2.4  1999     4 auto(l4)  f        19    27 r     mids…\n 9 chevrolet    malibu   2.4  2008     4 auto(l4)  f        22    30 r     mids…\n10 chevrolet    malibu   3.1  1999     6 auto(l4)  f        18    26 r     mids…\n# … with 96 more rows\n\n\n\n\n8.5.2 Filtering based on multiple conditions\nSuppose now that we want to filter vehicles that are front-wheel drive and has a 5 cylinders\n\ntable(mpg$cyl)\n\n\n 4  5  6  8 \n81  4 79 70 \n\n\n\nmpg %>% \n  filter(drv == 'f', cyl == 5)\n\n# A tibble: 4 × 11\n  manufacturer model      displ  year   cyl trans  drv     cty   hwy fl    class\n  <chr>        <chr>      <dbl> <int> <int> <chr>  <chr> <int> <int> <chr> <chr>\n1 volkswagen   jetta        2.5  2008     5 auto(… f        21    29 r     comp…\n2 volkswagen   jetta        2.5  2008     5 manua… f        21    29 r     comp…\n3 volkswagen   new beetle   2.5  2008     5 manua… f        20    28 r     subc…\n4 volkswagen   new beetle   2.5  2008     5 auto(… f        20    29 r     subc…\n\n\nHow about the vehicles that are either front-wheel drive or with 5 cylinders?\n\nmpg %>% \n  filter(drv == 'f' | cyl == 5)\n\n# A tibble: 106 × 11\n   manufacturer model  displ  year   cyl trans     drv     cty   hwy fl    class\n   <chr>        <chr>  <dbl> <int> <int> <chr>     <chr> <int> <int> <chr> <chr>\n 1 audi         a4       1.8  1999     4 auto(l5)  f        18    29 p     comp…\n 2 audi         a4       1.8  1999     4 manual(m… f        21    29 p     comp…\n 3 audi         a4       2    2008     4 manual(m… f        20    31 p     comp…\n 4 audi         a4       2    2008     4 auto(av)  f        21    30 p     comp…\n 5 audi         a4       2.8  1999     6 auto(l5)  f        16    26 p     comp…\n 6 audi         a4       2.8  1999     6 manual(m… f        18    26 p     comp…\n 7 audi         a4       3.1  2008     6 auto(av)  f        18    27 p     comp…\n 8 chevrolet    malibu   2.4  1999     4 auto(l4)  f        19    27 r     mids…\n 9 chevrolet    malibu   2.4  2008     4 auto(l4)  f        22    30 r     mids…\n10 chevrolet    malibu   3.1  1999     6 auto(l4)  f        18    26 r     mids…\n# … with 96 more rows\n\n\nHow about either front wheel drive and city fuel efficiency of 20 or 24 miles per gallon?\nFirst try to filter vehicles whose city mileage is 20 or 24 mpg\n\nmpg %>% \n  filter(cty == c(24, 20)) %>% \n  select(cty) %>% \n  table()\n\ncty\n20 24 \n 6  3 \n\n\n\nmpg %>% \n  filter(drv == 'f' | year == c(1999, 2000) )\n\n# A tibble: 134 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n 9 audi         a4 quattro   2.8  1999     6 manu… 4        17    25 p     comp…\n10 chevrolet    corvette     5.7  1999     8 auto… r        15    23 p     2sea…\n# … with 124 more rows"
  }
]